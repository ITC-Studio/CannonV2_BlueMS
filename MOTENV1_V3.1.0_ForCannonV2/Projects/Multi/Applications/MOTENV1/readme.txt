/**
******************************************************************************
* File    readme.txt  
* Version V3.1.0
* Date    12-July-2017
******************************************************************************
* Attention
*
* COPYRIGHT(c) 2017 STMicroelectronics
*
* Redistribution and use in source and binary forms, with or without modification,
* are permitted provided that the following conditions are met:
*   1. Redistributions of source code must retain the above copyright notice,
*      this list of conditions and the following disclaimer.
*   2. Redistributions in binary form must reproduce the above copyright notice,
*      this list of conditions and the following disclaimer in the documentation
*      and/or other materials provided with the distribution.
*   3. Neither the name of STMicroelectronics nor the names of its contributors
*      may be used to endorse or promote products derived from this software
*      without specific prior written permission.
*
* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
* AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
* IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
* DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
* FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
* DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
* SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
* CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
* OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*
******************************************************************************
*/

Application Description 

 This firmware package includes Components Device Drivers, Board Support Package
 and example application for the following STMicroelectronics elements:
 - X-NUCLEO-IDB04A1/X-NUCLEO-IDB05A1 Bluetooth Low energy expansion boards
 - X-NUCLEO-IKS01A1 Expansion board for four MEMS sensor devices:
       HTS221, LPS25H, LSM6DS0, LSM6DS3, LIS3MDL
 - X-NUCLEO-IKS01A2 Expansion board for four MEMS sensor devices:
       HTS221, LPS22HB, LSM6DSL, LSM303AGR
 - NUCLEO-L053R8 NUCLEO-F401RE NUCLEO-L476RG Nucleo boards
 - STEVAL-STLCS01V1 (SensorTile) evaluation board that contains the following MEMS sensor devices:
      HTS221, LPS22HB, LSM303, LSM6DSM
 - MotionFX (iNEMOEngine PRO) suite uses advanced algorithms to integrate outputs
 from multiple MEMS sensors in a smartway, independent of environmental conditions,
 to reach optimal performance. Real-time motion-sensor data fusion is set to significantly
 improve the user experience, increasing accuracy, resolution, stability and response time.
 - MotionAR (iNEMOEngine PRO) software provides real-time activity recognition data
 using MEMS accelerometer sensor
 - MotionCP (iNEMOEngine PRO) software provides carry Position recognition data
 using MEMS accelerometer sensor
 - MotionGR (iNEMOEngine PRO) software provides Gesture recognition data
 using MEMS accelerometer sensor
 - MotionPM (iNEMOEngine PRO) software provides Pedometer recognition data
 using MEMS accelerometer sensor
 - MotionID (iNEMOEngine PRO) software provides real-time Motion Intensity recognition data
 using MEMS accelerometer sensor


 The Example application initizializes all the Components and Library creating 4 Custom Bluetooth services:
 - The first service exposes all the HW characteristics related to MEMS sensor devices: Temperature, Humidity,
 Pressure, Magnetometer, Gyroscope and Accelleromenter, LED status
 - The second service exposes the SW characteristic: the quaternions generated by the MotionFX library 
 in short precision, the activity recognized using the MotionAR algorithm, the carry position
 recognized using the MotionCP algorithm, the Gesture recognized using the MotionGR algorithm,
 the Motion Intensity recognized using the MotionID algorithm and the Steps and frequency with MotionPM algorithm
 - The Third Service exposes the console services where we have stdin/stdout and stderr capabilities
 - The last Service is used for configuration purpose

 For NUCLEO boards (F401RE and L467RG only) the example application allows the user to control the initialization phase via UART.
 Launch a terminal application and set the UART port to 460800 bps, 8 bit, No Parity,
 1 stop bit.For having the same UART functionality on SensorTile board, is necessary to recompile the code uncomment the line
	//#define MONTENV1_ENABLE_PRINTF
 on file:
	Projects\Multi\Applications\MOTENV1\Inc\MOTENV1_config.h file
 This enables the UART that starts with a delay of 10 Seconds for allowing the time to open the UART for looking the initialization phase

 This example must be used with the related BlueMS Android/iOS application available on Play/itune store,
 in order to read the sent information by Bluetooth Low Energy protocol

                               -----------------------
                               | VERY IMPORTANT (1): |
                               -----------------------
  The implementation for Nucleo-F401RE/Nucleo-L476RG and STEVAL-STLCS01V1 allow the Firmware-Over-The-Air (FOTA).
  The FOTA is not available for Nucleo-L053R8 for FLASH size that is too little.
 
  ONLY for the implementations where FOTA is supported (Nucleo-F401RE/Nucleo-L476RG and STEVAL-STLCS01V1):
  
  1) The Firmware-Over-The-Air (FOTA) is done using the BlueMS Android/iOS application (Version 3.0.0 and above)
  The FOTA does not work when using X-NUCLEO-IDB04A1
 
  2) This example must run starting at address 0x08004000 in memory and works ONLY if the BootLoader 
  is saved at the beginning of the FLASH (address 0x08000000)
  
 For each IDE (IAR/µVision/System Workbench), and for each platform (NUCLEO-F401RE/NUCLEO-L476RG/SensorTile),
  there are some scripts CleanMOTENV1.bat/CleanMOTENV1.sh that makes the following operations:
 - Full Flash Erase
 - Load the BootLoader on the rigth flash region
 - Load the Program (after the compilation) on the rigth flash region (This could be used for a FOTA)
 - Dump back one single binary that contain BootLoader+Program that could be 
   flashed at the flash beginning (address 0x08000000) (This COULD BE NOT used for FOTA)
 - Reset the board
 
 The implementation of NUCLEO-L053R8 must run at the usual FLASH address (address 0x08000000) and the BootLoader must be avoided.
  
                               -----------------------
                               | VERY IMPORTANT (2): |
                               -----------------------
The code for STM32L476RG-Nucleo and for STM32F401RE-Nucleo makes the auto discovery
of the Sensors Board attached (IKS01A1/IKS01A2).
The code for STM32L053R8-Nucleo has not this functionality.
So it's necessary to choose the right Target configuration during the compilation.
If the code is compiled for IKS01A1 could not run if it's attached the X-NUCLEO-IKS01A2 and vice versa.

                               -----------------------
                               | VERY IMPORTANT (3): |
                               -----------------------
The Motion Libraries MotionFX, MotionAR, MotionCP, MotionGR, MotionID and MotionPM are available for
Nucleo-F401RE/Nucleo-L476RG and STEVAL-STLCS01V1 (excluding Nucleo-L053R8).

Inside the Binary Directory there are the following binaries:
Binary/
+-- STM32F401RE-Nucleo
¦   +-- MOTENV1_NucleoF401.bin    (Program without BootLoader. COULD BE USED     for FOTA)
¦   +-- MOTENV1_NucleoF401.hex    (Program without BootLoader. COULD NOT BE USED for FOTA)
¦   +-- MOTENV1_NucleoF401_BL.bin (Program with BootLoader.    COULD NOT BE USED for FOTA)
¦   +-- MOTENV1_NucleoF401_BL.hex (Program with BootLoader.    COULD NOT BE USED for FOTA)
+-- STM32L053R8-Nucleo
¦   +-- MOTENV1_IKS01A1_NucleoL053.bin    (Program without BootLoader for X-NUCLEO-IKS01A1. The implementation on NUCLEO-L053R8 doesn't have FOTA functionality)
¦   +-- MOTENV1_IKS01A1_NucleoL053.hex    (Program without BootLoader for X-NUCLEO-IKS01A1. The implementation on NUCLEO-L053R8 doesn't have FOTA functionality)
¦   +-- MOTENV1_IKS01A2_NucleoL053.bin    (Program without BootLoader for X-NUCLEO-IKS01A2. The implementation on NUCLEO-L053R8 doesn't have FOTA functionality)
¦   +-- MOTENV1_IKS01A2_NucleoL053.hex    (Program without BootLoader for X-NUCLEO-IKS01A2. The implementation on NUCLEO-L053R8 doesn't have FOTA functionality)
+-- STM32L476RG-Nucleo
¦   +-- MOTENV1_NucleoL476.bin    (Program without BootLoader. COULD BE USED     for FOTA)
¦   +-- MOTENV1_NucleoL476.hex    (Program without BootLoader. COULD NOT BE USED for FOTA)
¦   +-- MOTENV1_NucleoL476_BL.bin (Program with BootLoader.    COULD NOT BE USED for FOTA)
¦   +-- MOTENV1_NucleoL476_BL.hex (Program with BootLoader.    COULD NOT BE USED for FOTA)
+-- STM32L476RG-SensorTile
    +-- MOTENV1_ST.bin     (Program without BootLoader. COULD BE USED     for FOTA)
	+-- MOTENV1_ST.hex     (Program without BootLoader. COULD NOT BE USED for FOTA)
    +-- MOTENV1_ST_BL.bin  (Program with BootLoader.    COULD NOT BE USED for FOTA)
    +-- MOTENV1_ST_BL.hex  (Program with BootLoader.    COULD NOT BE USED for FOTA)



 The Magneto Calibration provided by MotionFX (INEMOEngine PRO) will be saved in in FLASH.
 In this way it's not necessary to make again the calibration at every STM32 Nucleo board reset.

 For avoiding accidental erasure of the calibration data, for forcing a new calibration it is necessary to press 
 the blue user button on the STM32 Nucleo board 3 times in less than 2 seconds.

 
@par Hardware and Software environment

  - This example runs on Sensor expansion board attached to STM32F401RE/STM32L476RG/STM32L053R8 devices
    can be easily tailored to any other supported device and development board.
    Or it runs on STEVAL-STLCS01V1 (SensorTile) evaluation board
    
  - This example must be used with the related BlueMS Android/iOS application available on Play/itune store,
    in order to read the sent information by Bluetooth Low Energy protocol

@par STM32Cube packages:
  - STM32F4xx drivers from STM32CubeF4 V1.16.0
  - STM32L4xx drivers from STM32CubeL4 V1.8.1
  - STM32L0xx drivers from STM32CubeL0 V1.9.0 
@par X-CUBE packages:
  - X-CUBE-BLE1 V3.0.0
  - X-CUBE-MEMS1 V4.0.0 [Modified for IKS01A1/IKS01A2 auto-discovery] 
@par STEVAL-STLCS01V1:
  - STEVAL-STLCS01V1 V1.3.2

@par How to use it ? 

This package contains projects for 3 IDEs viz. IAR, µVision and System Workbench. 
In order to make the  program work, you must do the following:
 - WARNING: before opening the project with any toolchain be sure your folder
   installation path is not too in-depth since the toolchain may report errors
   after building.

For IAR:
 - Open IAR toolchain (this firmware has been successfully tested with Embedded Workbench V7.80.4).
 - Open the IAR project file EWARM\STM32F401RE-Nucleo\MOTENV1_NF401.eww, or EWARM\STM32L476RG-Nucleo\MOTENV1_NL476.eww, or EWARM\STM32L053R8-Nucleo\MOTENV1_NL0.eww 
   or EWARM\STM32L476RG-SensorTile\MOTENV1_ST.eww
 - Rebuild all files and, for platforms different from Nucleo-L053R8, run the CleanMOTENV1.bat script that you find on the same directory

For µVision:
 - Open µVision toolchain (this firmware has been successfully tested with MDK-ARM Professional Version: 5.22.0).
 - Open the µVision project file MDK-ARM\STM32F401RE-Nucleo\Project.uvprojx, or MDK-ARM\STM32L476RG-Nucleo\Project.uvprojx, or MDK-ARM\STM32L053R8-Nucleo\Project.uvprojx
   or  MDK-ARM\STM32L476RG-SensorTile\Project.uvprojx
 - Rebuild all files and, for platforms different from Nucleo-L053R8, run the CleanMOTENV1.bat script that you find on the same directory.
 
For System Workbench:
 - Open System Workbench for STM32 (this firmware has been successfully tested with System Workbench for STM32 Version 1.15.0.201705101222.).
 - Set the default workspace proposed by the IDE (please be sure that there are not spaces in the workspace path).
 - Press "File" -> "Import" -> "Existing Projects into Workspace"; press "Browse" in the "Select root directory" and choose the path where the System
   Workbench project is located (it should be SW4STM32\STM32F401RE-Nucleo, or SW4STM32\STM32L476RG-Nucleo, or SW4STM32\STM32L053R8-Nucleo  or SW4STM32\STM32L476RG-SensorTile). 
  - Rebuild all files and, for platforms different from Nucleo-L053R8, run:
   - if you are on windows and you had installed the STM32 ST-Link utility:
        the CleanMOTENV1.bat script that you find on the same directory
   - Otherwise (Linux/iOS or Windows without the STM32 ST-Link Utility):
        the CleanMOTENV1.sh script that you find on the same directory but you must add the right installation path like requested
		
 /******************* (C) COPYRIGHT 2017 STMicroelectronics *****END OF FILE****/