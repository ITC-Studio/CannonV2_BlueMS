<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [STM32F4xx-Nucleo\MOTENV1_NucleoF401.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image STM32F4xx-Nucleo\MOTENV1_NucleoF401.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Tue Oct 24 16:54:14 2017
<BR><P>
<H3>Maximum Stack Usage =       5512 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MotionPM_manager_run &rArr; MotionPM_Update &rArr; runStepDetection &rArr; FilterData &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[199]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[199]">ADC_IRQHandler</a><BR>
 <LI><a href="#[181]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[181]">BusFault_Handler</a><BR>
 <LI><a href="#[17f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17f]">HardFault_Handler</a><BR>
 <LI><a href="#[180]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[180]">MemManage_Handler</a><BR>
 <LI><a href="#[182]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[182]">UsageFault_Handler</a><BR>
 <LI><a href="#[2c7]">DebugConsoleCommandParsing</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30e]">getBlueNRGVersion</a><BR>
 <LI><a href="#[2bc]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2bc]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[199]">ADC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c8]">BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1c9]">BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1c2]">BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1c3]">BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1c6]">BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1c7]">BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1ca]">BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1cb]">BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1cc]">BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1cd]">BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1ce]">BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[1cf]">BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[1d0]">BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[1d1]">BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[1d6]">BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWOrientation6D)
 <LI><a href="#[1d7]">BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWOrientation6D)
 <LI><a href="#[1d2]">BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWDoubleTap)
 <LI><a href="#[1d3]">BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWDoubleTap)
 <LI><a href="#[1d4]">BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWFreeFall)
 <LI><a href="#[1d5]">BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWFreeFall)
 <LI><a href="#[1d8]">BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWPedometer)
 <LI><a href="#[1d9]">BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWPedometer)
 <LI><a href="#[1da]">BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWSingleTap)
 <LI><a href="#[1db]">BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWSingleTap)
 <LI><a href="#[1dc]">BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWTilt)
 <LI><a href="#[1dd]">BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWTilt)
 <LI><a href="#[1de]">BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.EnableHWWakeUp)
 <LI><a href="#[1df]">BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.EnableHWWakeUp)
 <LI><a href="#[224]">BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[225]">BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[1e3]">BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e2]">BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e0]">BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e1]">BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e7]">BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e6]">BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e5]">BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e4]">BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1eb]">BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1ea]">BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e9]">BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[1e8]">BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetHWOrientation6D)
 <LI><a href="#[22f]">BSP_ACCELERO_Get_AxesRaw_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_AxesRaw_IKS01A1) referenced 2 times from main.o(i.main)
 <LI><a href="#[22e]">BSP_ACCELERO_Get_AxesRaw_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_AxesRaw_IKS01A2) referenced 2 times from main.o(i.main)
 <LI><a href="#[228]">BSP_ACCELERO_Get_Axes_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[229]">BSP_ACCELERO_Get_Axes_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[21c]">BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[21d]">BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[21a]">BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[21b]">BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[1ef]">BSP_ACCELERO_Get_ODR_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A1) referenced from hwadvancefeatures.o(i.InitHWFeatures)
 <LI><a href="#[1ee]">BSP_ACCELERO_Get_ODR_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A2) referenced from hwadvancefeatures.o(i.InitHWFeatures)
 <LI><a href="#[226]">BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[227]">BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[217]">BSP_ACCELERO_Get_Sensitivity_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A1) referenced from main.o(i.Set2GAccelerometerFullScale)
 <LI><a href="#[217]">BSP_ACCELERO_Get_Sensitivity_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A1) referenced from main.o(i.Set4GAccelerometerFullScale)
 <LI><a href="#[217]">BSP_ACCELERO_Get_Sensitivity_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[216]">BSP_ACCELERO_Get_Sensitivity_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A2) referenced from main.o(i.Set2GAccelerometerFullScale)
 <LI><a href="#[216]">BSP_ACCELERO_Get_Sensitivity_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A2) referenced from main.o(i.Set4GAccelerometerFullScale)
 <LI><a href="#[216]">BSP_ACCELERO_Get_Sensitivity_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[21e]">BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[21f]">BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[1ec]">BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.GetStepHWPedometer)
 <LI><a href="#[1ed]">BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.GetStepHWPedometer)
 <LI><a href="#[222]">BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[223]">BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[220]">BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[221]">BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[212]">BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A1) referenced from hwadvancefeatures.o(i.ResetHWPedometer)
 <LI><a href="#[213]">BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A2) referenced from hwadvancefeatures.o(i.ResetHWPedometer)
 <LI><a href="#[1fa]">BSP_ACCELERO_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1fb]">BSP_ACCELERO_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[215]">BSP_ACCELERO_Set_FS_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A1) referenced from main.o(i.Set2GAccelerometerFullScale)
 <LI><a href="#[215]">BSP_ACCELERO_Set_FS_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A1) referenced from main.o(i.Set4GAccelerometerFullScale)
 <LI><a href="#[215]">BSP_ACCELERO_Set_FS_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A1) referenced from main.o(i.main)
 <LI><a href="#[214]">BSP_ACCELERO_Set_FS_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A2) referenced from main.o(i.Set2GAccelerometerFullScale)
 <LI><a href="#[214]">BSP_ACCELERO_Set_FS_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A2) referenced from main.o(i.Set4GAccelerometerFullScale)
 <LI><a href="#[214]">BSP_ACCELERO_Set_FS_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A2) referenced from main.o(i.main)
 <LI><a href="#[1c5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1c5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1c5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1c5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1c5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1c5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[1c5]">BSP_ACCELERO_Set_ODR_Value_IKS01A1</a> from x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[1c4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWDoubleTap)
 <LI><a href="#[1c4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWFreeFall)
 <LI><a href="#[1c4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWOrientation6D)
 <LI><a href="#[1c4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWPedometer)
 <LI><a href="#[1c4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWSingleTap)
 <LI><a href="#[1c4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWTilt)
 <LI><a href="#[1c4]">BSP_ACCELERO_Set_ODR_Value_IKS01A2</a> from x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2) referenced from hwadvancefeatures.o(i.DisableHWWakeUp)
 <LI><a href="#[22d]">BSP_GYRO_Get_Axes_IKS01A1</a> from x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A1) referenced 2 times from main.o(i.main)
 <LI><a href="#[22c]">BSP_GYRO_Get_Axes_IKS01A2</a> from x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A2) referenced 2 times from main.o(i.main)
 <LI><a href="#[1f1]">BSP_GYRO_Init_IKS01A1</a> from x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Init_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1f0]">BSP_GYRO_Init_IKS01A2</a> from x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Init_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1fc]">BSP_GYRO_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1fd]">BSP_GYRO_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[20d]">BSP_HUMIDITY_Get_Hum_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A1) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[20d]">BSP_HUMIDITY_Get_Hum_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A1) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[20c]">BSP_HUMIDITY_Get_Hum_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A2) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[20c]">BSP_HUMIDITY_Get_Hum_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A2) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[1f5]">BSP_HUMIDITY_Init_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Init_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1f4]">BSP_HUMIDITY_Init_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Init_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[20a]">BSP_HUMIDITY_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A1) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[20a]">BSP_HUMIDITY_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A1) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[20b]">BSP_HUMIDITY_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A2) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[20b]">BSP_HUMIDITY_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A2) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[200]">BSP_HUMIDITY_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[201]">BSP_HUMIDITY_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[22b]">BSP_MAGNETO_Get_Axes_IKS01A1</a> from x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A1) referenced 2 times from main.o(i.main)
 <LI><a href="#[22a]">BSP_MAGNETO_Get_Axes_IKS01A2</a> from x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A2) referenced 2 times from main.o(i.main)
 <LI><a href="#[1f3]">BSP_MAGNETO_Init_IKS01A1</a> from x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Init_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1f2]">BSP_MAGNETO_Init_IKS01A2</a> from x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Init_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1fe]">BSP_MAGNETO_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1ff]">BSP_MAGNETO_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[209]">BSP_PRESSURE_Get_Press_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A1) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[209]">BSP_PRESSURE_Get_Press_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A1) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[208]">BSP_PRESSURE_Get_Press_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A2) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[208]">BSP_PRESSURE_Get_Press_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A2) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[1f9]">BSP_PRESSURE_Init_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Init_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1f8]">BSP_PRESSURE_Init_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Init_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[206]">BSP_PRESSURE_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A1) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[206]">BSP_PRESSURE_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A1) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[207]">BSP_PRESSURE_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A2) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[207]">BSP_PRESSURE_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A2) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[204]">BSP_PRESSURE_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[205]">BSP_PRESSURE_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[211]">BSP_TEMPERATURE_Get_Temp_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A1) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[211]">BSP_TEMPERATURE_Get_Temp_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A1) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[210]">BSP_TEMPERATURE_Get_Temp_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A2) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[210]">BSP_TEMPERATURE_Get_Temp_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A2) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[1f7]">BSP_TEMPERATURE_Init_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[1f6]">BSP_TEMPERATURE_Init_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[20f]">BSP_TEMPERATURE_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A1) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[20f]">BSP_TEMPERATURE_IsInitialized_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A1) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[20e]">BSP_TEMPERATURE_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A2) referenced from sensor_service.o(i.Read_Request_CB)
 <LI><a href="#[20e]">BSP_TEMPERATURE_IsInitialized_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A2) referenced from main.o(i.SendEnvironmentalData)
 <LI><a href="#[202]">BSP_TEMPERATURE_Sensor_Enable_IKS01A1</a> from x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A1) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[203]">BSP_TEMPERATURE_Sensor_Enable_IKS01A2</a> from x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A2) referenced from targetplatform.o(i.Init_MEM1_Sensors)
 <LI><a href="#[181]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[192]">DMA1_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[193]">DMA1_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[194]">DMA1_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[195]">DMA1_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[196]">DMA1_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[197]">DMA1_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[198]">DMA1_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ad]">DMA1_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b1]">DMA2_Stream0_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b2]">DMA2_Stream1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b3]">DMA2_Stream2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b4]">DMA2_Stream3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b5]">DMA2_Stream4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b7]">DMA2_Stream5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b8]">DMA2_Stream6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b9]">DMA2_Stream7_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[184]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18d]">EXTI0_IRQHandler</a> from stm32f4xx_it.o(i.EXTI0_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1aa]">EXTI15_10_IRQHandler</a> from stm32f4xx_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18e]">EXTI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18f]">EXTI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[190]">EXTI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[191]">EXTI4_IRQHandler</a> from stm32f4xx_it.o(i.EXTI4_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19a]">EXTI9_5_IRQHandler</a> from stm32f4xx_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18b]">FLASH_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1bd]">FPU_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[7]">HTS221_H_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[3]">HTS221_H_DeInit</a> from hts221_driver_hl.o(i.HTS221_H_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[e]">HTS221_H_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[8]">HTS221_H_Get_Hum</a> from hts221_driver_hl.o(i.HTS221_H_Get_Hum) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[9]">HTS221_H_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[6]">HTS221_H_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[2]">HTS221_H_Init</a> from hts221_driver_hl.o(i.HTS221_H_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[c]">HTS221_H_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[5]">HTS221_H_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[4]">HTS221_H_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_H_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[a]">HTS221_H_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[b]">HTS221_H_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[d]">HTS221_H_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_H_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[14]">HTS221_T_Check_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[10]">HTS221_T_DeInit</a> from hts221_driver_hl.o(i.HTS221_T_DeInit) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1b]">HTS221_T_Get_DRDY_Status</a> from hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[16]">HTS221_T_Get_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Get_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[15]">HTS221_T_Get_Temp</a> from hts221_driver_hl.o(i.HTS221_T_Get_Temp) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[13]">HTS221_T_Get_WhoAmI</a> from hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[f]">HTS221_T_Init</a> from hts221_driver_hl.o(i.HTS221_T_Init) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[19]">HTS221_T_Read_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Read_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[12]">HTS221_T_Sensor_Disable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Disable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[11]">HTS221_T_Sensor_Enable</a> from hts221_driver_hl.o(i.HTS221_T_Sensor_Enable) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[17]">HTS221_T_Set_ODR</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[18]">HTS221_T_Set_ODR_Value</a> from hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[1a]">HTS221_T_Write_Reg</a> from hts221_driver_hl.o(i.HTS221_T_Write_Reg) referenced 2 times from hts221_driver_hl.o(.data)
 <LI><a href="#[17f]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a3]">I2C1_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a2]">I2C1_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a5]">I2C2_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a4]">I2C2_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1bc]">I2C3_ER_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1bb]">I2C3_EV_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[21]">LIS3MDL_Check_WhoAmI</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Check_WhoAmI) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[1d]">LIS3MDL_DeInit</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_DeInit) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[22]">LIS3MDL_Get_Axes</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[23]">LIS3MDL_Get_AxesRaw</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_AxesRaw) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2d]">LIS3MDL_Get_DRDY_Status</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_DRDY_Status) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[28]">LIS3MDL_Get_FS</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_FS) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[25]">LIS3MDL_Get_ODR</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_ODR) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[24]">LIS3MDL_Get_Sensitivity</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Sensitivity) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[20]">LIS3MDL_Get_WhoAmI</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_WhoAmI) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[1c]">LIS3MDL_Init</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Init) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2b]">LIS3MDL_Read_Reg</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Read_Reg) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[1f]">LIS3MDL_Sensor_Disable</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Disable) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[1e]">LIS3MDL_Sensor_Enable</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Enable) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[29]">LIS3MDL_Set_FS</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2a]">LIS3MDL_Set_FS_Value</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS_Value) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[26]">LIS3MDL_Set_ODR</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[27]">LIS3MDL_Set_ODR_Value</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR_Value) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[2c]">LIS3MDL_Write_Reg</a> from lis3mdl_mag_driver_hl.o(i.LIS3MDL_Write_Reg) referenced 2 times from lis3mdl_mag_driver_hl.o(.data)
 <LI><a href="#[4f]">LPS22HB_FIFO_Get_Data</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[48]">LPS22HB_FIFO_Get_Empty_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4b]">LPS22HB_FIFO_Get_Fth_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[49]">LPS22HB_FIFO_Get_Full_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[50]">LPS22HB_FIFO_Get_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4e]">LPS22HB_FIFO_Get_Num_Of_Samples</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4a]">LPS22HB_FIFO_Get_Ovr_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[52]">LPS22HB_FIFO_Get_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[56]">LPS22HB_FIFO_Reset_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[55]">LPS22HB_FIFO_Set_Interrupt</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[51]">LPS22HB_FIFO_Set_Mode</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[53]">LPS22HB_FIFO_Set_Watermark_Level</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4c]">LPS22HB_FIFO_Stop_On_Fth</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[4d]">LPS22HB_FIFO_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[54]">LPS22HB_FIFO_Watermark_Usage</a> from lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage) referenced 4 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[33]">LPS22HB_P_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2f]">LPS22HB_P_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_P_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3a]">LPS22HB_P_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[35]">LPS22HB_P_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[34]">LPS22HB_P_Get_Press</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[32]">LPS22HB_P_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[2e]">LPS22HB_P_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[38]">LPS22HB_P_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[31]">LPS22HB_P_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[30]">LPS22HB_P_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[36]">LPS22HB_P_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[37]">LPS22HB_P_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[39]">LPS22HB_P_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[40]">LPS22HB_T_Check_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3c]">LPS22HB_T_DeInit</a> from lps22hb_driver_hl.o(i.LPS22HB_T_DeInit) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[47]">LPS22HB_T_Get_DRDY_Status</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[42]">LPS22HB_T_Get_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[41]">LPS22HB_T_Get_Temp</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3f]">LPS22HB_T_Get_WhoAmI</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3b]">LPS22HB_T_Init</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Init) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[45]">LPS22HB_T_Read_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3e]">LPS22HB_T_Sensor_Disable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[3d]">LPS22HB_T_Sensor_Enable</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[43]">LPS22HB_T_Set_ODR</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[44]">LPS22HB_T_Set_ODR_Value</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[46]">LPS22HB_T_Write_Reg</a> from lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg) referenced 2 times from lps22hb_driver_hl.o(.data)
 <LI><a href="#[5c]">LPS25HB_P_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[58]">LPS25HB_P_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_P_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[63]">LPS25HB_P_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5e]">LPS25HB_P_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5d]">LPS25HB_P_Get_Press</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5b]">LPS25HB_P_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[57]">LPS25HB_P_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[61]">LPS25HB_P_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5a]">LPS25HB_P_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[59]">LPS25HB_P_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[5f]">LPS25HB_P_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[60]">LPS25HB_P_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[62]">LPS25HB_P_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[69]">LPS25HB_T_Check_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[65]">LPS25HB_T_DeInit</a> from lps25hb_driver_hl.o(i.LPS25HB_T_DeInit) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[70]">LPS25HB_T_Get_DRDY_Status</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6b]">LPS25HB_T_Get_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6a]">LPS25HB_T_Get_Temp</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[68]">LPS25HB_T_Get_WhoAmI</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[64]">LPS25HB_T_Init</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Init) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6e]">LPS25HB_T_Read_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[67]">LPS25HB_T_Sensor_Disable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[66]">LPS25HB_T_Sensor_Enable</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6c]">LPS25HB_T_Set_ODR</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6d]">LPS25HB_T_Set_ODR_Value</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[6f]">LPS25HB_T_Write_Reg</a> from lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg) referenced 2 times from lps25hb_driver_hl.o(.data)
 <LI><a href="#[113]">LSM303AGR_M_Check_WhoAmI</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Check_WhoAmI) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[10f]">LSM303AGR_M_DeInit</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_DeInit) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[114]">LSM303AGR_M_Get_Axes</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[115]">LSM303AGR_M_Get_AxesRaw</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_AxesRaw) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11f]">LSM303AGR_M_Get_DRDY_Status</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_DRDY_Status) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11a]">LSM303AGR_M_Get_FS</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_FS) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[117]">LSM303AGR_M_Get_ODR</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_ODR) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[116]">LSM303AGR_M_Get_Sensitivity</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Sensitivity) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[112]">LSM303AGR_M_Get_WhoAmI</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_WhoAmI) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[10e]">LSM303AGR_M_Init</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Init) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11d]">LSM303AGR_M_Read_Reg</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Read_Reg) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[111]">LSM303AGR_M_Sensor_Disable</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Disable) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[110]">LSM303AGR_M_Sensor_Enable</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Enable) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11b]">LSM303AGR_M_Set_FS</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11c]">LSM303AGR_M_Set_FS_Value</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS_Value) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[118]">LSM303AGR_M_Set_ODR</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[119]">LSM303AGR_M_Set_ODR_Value</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR_Value) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[11e]">LSM303AGR_M_Write_Reg</a> from lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Write_Reg) referenced 2 times from lsm303agr_mag_driver_hl.o(.data)
 <LI><a href="#[ff]">LSM303AGR_X_Check_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[fb]">LSM303AGR_X_DeInit</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[100]">LSM303AGR_X_Get_Axes</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[101]">LSM303AGR_X_Get_AxesRaw</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[109]">LSM303AGR_X_Get_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10d]">LSM303AGR_X_Get_DRDY_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[106]">LSM303AGR_X_Get_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[103]">LSM303AGR_X_Get_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[102]">LSM303AGR_X_Get_Sensitivity</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[fe]">LSM303AGR_X_Get_WhoAmI</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[fa]">LSM303AGR_X_Init</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10b]">LSM303AGR_X_Read_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[fd]">LSM303AGR_X_Sensor_Disable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[fc]">LSM303AGR_X_Sensor_Enable</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10a]">LSM303AGR_X_Set_Axes_Status</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[107]">LSM303AGR_X_Set_FS</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[108]">LSM303AGR_X_Set_FS_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[104]">LSM303AGR_X_Set_ODR</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[105]">LSM303AGR_X_Set_ODR_Value</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[10c]">LSM303AGR_X_Write_Reg</a> from lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg) referenced 2 times from lsm303agr_acc_driver_hl.o(.data)
 <LI><a href="#[8a]">LSM6DS0_G_Check_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Check_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[86]">LSM6DS0_G_DeInit</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_DeInit) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8b]">LSM6DS0_G_Get_Axes</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8c]">LSM6DS0_G_Get_AxesRaw</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_AxesRaw) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[94]">LSM6DS0_G_Get_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[98]">LSM6DS0_G_Get_DRDY_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_DRDY_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[91]">LSM6DS0_G_Get_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8e]">LSM6DS0_G_Get_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8d]">LSM6DS0_G_Get_Sensitivity</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Sensitivity) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[89]">LSM6DS0_G_Get_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[85]">LSM6DS0_G_Init</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Init) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[96]">LSM6DS0_G_Read_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Read_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[88]">LSM6DS0_G_Sensor_Disable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Disable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[87]">LSM6DS0_G_Sensor_Enable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Enable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[95]">LSM6DS0_G_Set_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[92]">LSM6DS0_G_Set_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[93]">LSM6DS0_G_Set_FS_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[8f]">LSM6DS0_G_Set_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[90]">LSM6DS0_G_Set_ODR_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[97]">LSM6DS0_G_Write_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Write_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[76]">LSM6DS0_X_Check_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Check_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[72]">LSM6DS0_X_DeInit</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_DeInit) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[77]">LSM6DS0_X_Get_Axes</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[78]">LSM6DS0_X_Get_AxesRaw</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_AxesRaw) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[80]">LSM6DS0_X_Get_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[84]">LSM6DS0_X_Get_DRDY_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_DRDY_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7d]">LSM6DS0_X_Get_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7a]">LSM6DS0_X_Get_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[79]">LSM6DS0_X_Get_Sensitivity</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Sensitivity) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[75]">LSM6DS0_X_Get_WhoAmI</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_WhoAmI) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[71]">LSM6DS0_X_Init</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Init) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[82]">LSM6DS0_X_Read_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Read_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[74]">LSM6DS0_X_Sensor_Disable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Disable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[73]">LSM6DS0_X_Sensor_Enable</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Enable) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[81]">LSM6DS0_X_Set_Axes_Status</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_Axes_Status) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7e]">LSM6DS0_X_Set_FS</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7f]">LSM6DS0_X_Set_FS_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7b]">LSM6DS0_X_Set_ODR</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[7c]">LSM6DS0_X_Set_ODR_Value</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[83]">LSM6DS0_X_Write_Reg</a> from lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Write_Reg) referenced 2 times from lsm6ds0_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cf]">LSM6DS3_FIFO_G_Get_Axis</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Get_Axis) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ce]">LSM6DS3_FIFO_G_Set_Decimation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Set_Decimation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c4]">LSM6DS3_FIFO_Get_Data</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Data) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c1]">LSM6DS3_FIFO_Get_Empty_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Empty_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c0]">LSM6DS3_FIFO_Get_Full_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Full_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c5]">LSM6DS3_FIFO_Get_Num_Of_Samples</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Num_Of_Samples) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c2]">LSM6DS3_FIFO_Get_Overrun_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Overrun_Status) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c3]">LSM6DS3_FIFO_Get_Pattern</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Pattern) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c9]">LSM6DS3_FIFO_Set_INT1_FIFO_Full</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_INT1_FIFO_Full) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c8]">LSM6DS3_FIFO_Set_Mode</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Mode) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bf]">LSM6DS3_FIFO_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_ODR_Value) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cb]">LSM6DS3_FIFO_Set_Stop_On_Fth</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Stop_On_Fth) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ca]">LSM6DS3_FIFO_Set_Watermark_Level</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Watermark_Level) referenced 4 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c7]">LSM6DS3_FIFO_X_Get_Axis</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Get_Axis) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[c6]">LSM6DS3_FIFO_X_Set_Decimation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Set_Decimation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[eb]">LSM6DS3_G_Check_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Check_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e7]">LSM6DS3_G_DeInit</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_DeInit) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ec]">LSM6DS3_G_Get_Axes</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ed]">LSM6DS3_G_Get_AxesRaw</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_AxesRaw) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f5]">LSM6DS3_G_Get_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f9]">LSM6DS3_G_Get_DRDY_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_DRDY_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f2]">LSM6DS3_G_Get_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ef]">LSM6DS3_G_Get_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ee]">LSM6DS3_G_Get_Sensitivity</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Sensitivity) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ea]">LSM6DS3_G_Get_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e6]">LSM6DS3_G_Init</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Init) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f7]">LSM6DS3_G_Read_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Read_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e9]">LSM6DS3_G_Sensor_Disable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Disable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e8]">LSM6DS3_G_Sensor_Enable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Enable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f6]">LSM6DS3_G_Set_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f3]">LSM6DS3_G_Set_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f4]">LSM6DS3_G_Set_FS_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d0]">LSM6DS3_G_Set_Interrupt_Latch</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Interrupt_Latch) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f0]">LSM6DS3_G_Set_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f1]">LSM6DS3_G_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d1]">LSM6DS3_G_Set_SelfTest</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_SelfTest) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[f8]">LSM6DS3_G_Write_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Write_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d7]">LSM6DS3_X_Check_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Check_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d3]">LSM6DS3_X_DeInit</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_DeInit) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b6]">LSM6DS3_X_Disable_6D_Orientation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_6D_Orientation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[af]">LSM6DS3_X_Disable_Double_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Double_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9a]">LSM6DS3_X_Disable_Free_Fall_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Free_Fall_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9e]">LSM6DS3_X_Disable_Pedometer</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Pedometer) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ac]">LSM6DS3_X_Disable_Single_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Single_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a2]">LSM6DS3_X_Disable_Step_Counter_Reset</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Step_Counter_Reset) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a5]">LSM6DS3_X_Disable_Tilt_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Tilt_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a8]">LSM6DS3_X_Disable_Wake_Up_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Wake_Up_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b5]">LSM6DS3_X_Enable_6D_Orientation</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_6D_Orientation) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ae]">LSM6DS3_X_Enable_Double_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Double_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[99]">LSM6DS3_X_Enable_Free_Fall_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Free_Fall_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9d]">LSM6DS3_X_Enable_Pedometer</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Pedometer) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ab]">LSM6DS3_X_Enable_Single_Tap_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Single_Tap_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a1]">LSM6DS3_X_Enable_Step_Counter_Reset</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Step_Counter_Reset) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a4]">LSM6DS3_X_Enable_Tilt_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Tilt_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a7]">LSM6DS3_X_Enable_Wake_Up_Detection</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Wake_Up_Detection) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b7]">LSM6DS3_X_Get_6D_Orientation_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b9]">LSM6DS3_X_Get_6D_Orientation_XH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b8]">LSM6DS3_X_Get_6D_Orientation_XL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bb]">LSM6DS3_X_Get_6D_Orientation_YH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ba]">LSM6DS3_X_Get_6D_Orientation_YL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bd]">LSM6DS3_X_Get_6D_Orientation_ZH</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZH) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[bc]">LSM6DS3_X_Get_6D_Orientation_ZL</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZL) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d8]">LSM6DS3_X_Get_Axes</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d9]">LSM6DS3_X_Get_AxesRaw</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_AxesRaw) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e1]">LSM6DS3_X_Get_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e5]">LSM6DS3_X_Get_DRDY_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_DRDY_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b0]">LSM6DS3_X_Get_Double_Tap_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Double_Tap_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[be]">LSM6DS3_X_Get_Event_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Event_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[de]">LSM6DS3_X_Get_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9b]">LSM6DS3_X_Get_Free_Fall_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Free_Fall_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[db]">LSM6DS3_X_Get_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9f]">LSM6DS3_X_Get_Pedometer_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Pedometer_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[da]">LSM6DS3_X_Get_Sensitivity</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Sensitivity) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[ad]">LSM6DS3_X_Get_Single_Tap_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Single_Tap_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a0]">LSM6DS3_X_Get_Step_Count</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Step_Count) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a6]">LSM6DS3_X_Get_Tilt_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Tilt_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a9]">LSM6DS3_X_Get_Wake_Up_Detection_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Wake_Up_Detection_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d6]">LSM6DS3_X_Get_WhoAmI</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_WhoAmI) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d2]">LSM6DS3_X_Init</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Init) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e3]">LSM6DS3_X_Read_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Read_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d5]">LSM6DS3_X_Sensor_Disable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Disable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[d4]">LSM6DS3_X_Sensor_Enable</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Enable) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e2]">LSM6DS3_X_Set_Axes_Status</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Axes_Status) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[df]">LSM6DS3_X_Set_FS</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e0]">LSM6DS3_X_Set_FS_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[9c]">LSM6DS3_X_Set_Free_Fall_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Free_Fall_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cc]">LSM6DS3_X_Set_Interrupt_Latch</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Interrupt_Latch) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[dc]">LSM6DS3_X_Set_ODR</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[dd]">LSM6DS3_X_Set_ODR_Value</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[a3]">LSM6DS3_X_Set_Pedometer_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Pedometer_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[cd]">LSM6DS3_X_Set_SelfTest</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_SelfTest) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b4]">LSM6DS3_X_Set_Tap_Duration_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Duration_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b3]">LSM6DS3_X_Set_Tap_Quiet_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Quiet_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b2]">LSM6DS3_X_Set_Tap_Shock_Time</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Shock_Time) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[b1]">LSM6DS3_X_Set_Tap_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[aa]">LSM6DS3_X_Set_Wake_Up_Threshold</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Wake_Up_Threshold) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[e4]">LSM6DS3_X_Write_Reg</a> from lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Write_Reg) referenced 2 times from lsm6ds3_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[156]">LSM6DSL_FIFO_G_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[155]">LSM6DSL_FIFO_G_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14b]">LSM6DSL_FIFO_Get_Data</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[148]">LSM6DSL_FIFO_Get_Empty_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[147]">LSM6DSL_FIFO_Get_Full_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14c]">LSM6DSL_FIFO_Get_Num_Of_Samples</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[149]">LSM6DSL_FIFO_Get_Overrun_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14a]">LSM6DSL_FIFO_Get_Pattern</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[150]">LSM6DSL_FIFO_Set_INT1_FIFO_Full</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14f]">LSM6DSL_FIFO_Set_Mode</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[146]">LSM6DSL_FIFO_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[152]">LSM6DSL_FIFO_Set_Stop_On_Fth</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[151]">LSM6DSL_FIFO_Set_Watermark_Level</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level) referenced 4 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14e]">LSM6DSL_FIFO_X_Get_Axis</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[14d]">LSM6DSL_FIFO_X_Set_Decimation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[170]">LSM6DSL_G_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16c]">LSM6DSL_G_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[171]">LSM6DSL_G_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[172]">LSM6DSL_G_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17c]">LSM6DSL_G_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[177]">LSM6DSL_G_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[174]">LSM6DSL_G_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[173]">LSM6DSL_G_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16f]">LSM6DSL_G_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16b]">LSM6DSL_G_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17a]">LSM6DSL_G_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16e]">LSM6DSL_G_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16d]">LSM6DSL_G_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[178]">LSM6DSL_G_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[179]">LSM6DSL_G_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[157]">LSM6DSL_G_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[175]">LSM6DSL_G_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[176]">LSM6DSL_G_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[158]">LSM6DSL_G_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[17b]">LSM6DSL_G_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15e]">LSM6DSL_X_Check_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15a]">LSM6DSL_X_DeInit</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13d]">LSM6DSL_X_Disable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[136]">LSM6DSL_X_Disable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[121]">LSM6DSL_X_Disable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[125]">LSM6DSL_X_Disable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[133]">LSM6DSL_X_Disable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[129]">LSM6DSL_X_Disable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12c]">LSM6DSL_X_Disable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12f]">LSM6DSL_X_Disable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13c]">LSM6DSL_X_Enable_6D_Orientation</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[135]">LSM6DSL_X_Enable_Double_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[120]">LSM6DSL_X_Enable_Free_Fall_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[124]">LSM6DSL_X_Enable_Pedometer</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[132]">LSM6DSL_X_Enable_Single_Tap_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[128]">LSM6DSL_X_Enable_Step_Counter_Reset</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12b]">LSM6DSL_X_Enable_Tilt_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12e]">LSM6DSL_X_Enable_Wake_Up_Detection</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13e]">LSM6DSL_X_Get_6D_Orientation_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[140]">LSM6DSL_X_Get_6D_Orientation_XH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13f]">LSM6DSL_X_Get_6D_Orientation_XL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[142]">LSM6DSL_X_Get_6D_Orientation_YH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[141]">LSM6DSL_X_Get_6D_Orientation_YL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[144]">LSM6DSL_X_Get_6D_Orientation_ZH</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[143]">LSM6DSL_X_Get_6D_Orientation_ZL</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15f]">LSM6DSL_X_Get_Axes</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[160]">LSM6DSL_X_Get_AxesRaw</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[16a]">LSM6DSL_X_Get_DRDY_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[137]">LSM6DSL_X_Get_Double_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[145]">LSM6DSL_X_Get_Event_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Event_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[165]">LSM6DSL_X_Get_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[122]">LSM6DSL_X_Get_Free_Fall_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[162]">LSM6DSL_X_Get_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[126]">LSM6DSL_X_Get_Pedometer_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[161]">LSM6DSL_X_Get_Sensitivity</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[134]">LSM6DSL_X_Get_Single_Tap_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[127]">LSM6DSL_X_Get_Step_Count</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12d]">LSM6DSL_X_Get_Tilt_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[130]">LSM6DSL_X_Get_Wake_Up_Detection_Status</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15d]">LSM6DSL_X_Get_WhoAmI</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[159]">LSM6DSL_X_Init</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[168]">LSM6DSL_X_Read_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15c]">LSM6DSL_X_Sensor_Disable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[15b]">LSM6DSL_X_Sensor_Enable</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[166]">LSM6DSL_X_Set_FS</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[167]">LSM6DSL_X_Set_FS_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[123]">LSM6DSL_X_Set_Free_Fall_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[153]">LSM6DSL_X_Set_Interrupt_Latch</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[163]">LSM6DSL_X_Set_ODR</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[164]">LSM6DSL_X_Set_ODR_Value</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[12a]">LSM6DSL_X_Set_Pedometer_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[154]">LSM6DSL_X_Set_SelfTest</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13b]">LSM6DSL_X_Set_Tap_Duration_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[13a]">LSM6DSL_X_Set_Tap_Quiet_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[139]">LSM6DSL_X_Set_Tap_Shock_Time</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[138]">LSM6DSL_X_Set_Tap_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[131]">LSM6DSL_X_Set_Wake_Up_Threshold</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[169]">LSM6DSL_X_Write_Reg</a> from lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg) referenced 2 times from lsm6dsl_acc_gyro_driver_hl.o(.data)
 <LI><a href="#[180]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17e]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b6]">OTG_FS_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ac]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[188]">PVD_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[185]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18c]">RCC_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ab]">RTC_Alarm_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[18a]">RTC_WKUP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[17d]">Reset_Handler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ae]">SDIO_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a6]">SPI1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a7]">SPI2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1b0]">SPI3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1be]">SPI4_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[183]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[186]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c0]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[189]">TAMP_STAMP_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19b]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19e]">TIM1_CC_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_CC_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19d]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19c]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[19f]">TIM2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a0]">TIM3_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a1]">TIM4_IRQHandler</a> from stm32f4xx_it.o(i.TIM4_IRQHandler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1af]">TIM5_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a8]">USART1_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1a9]">USART2_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1ba]">USART6_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[182]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[187]">WWDG_IRQHandler</a> from startup_stm32f401xe.o(.text) referenced from startup_stm32f401xe.o(RESET)
 <LI><a href="#[1c1]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f401xe.o(.text)
 <LI><a href="#[219]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[218]">fputc</a> from console.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[1bf]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c1]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[505]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[230]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2a8]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[506]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[507]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[508]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[509]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[50a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[17d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[199]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[192]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[193]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[194]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[195]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[196]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[197]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[198]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ad]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b1]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b2]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b3]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b4]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b5]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b7]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b8]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b9]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[190]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bd]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a3]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a2]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a5]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a4]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bc]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1bb]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b6]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ac]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[188]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ab]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[18a]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ae]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a6]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a7]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1b0]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1be]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[189]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19b]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19d]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19c]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19f]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a0]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1af]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a8]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a9]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1ba]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[187]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f401xe.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4b7]"></a>MotionAR_Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motion_ar.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_manager_init
</UL>

<P><STRONG><a name="[23b]"></a>MotionAR_SetOrientation_Acc</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, motion_ar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotionAR_SetOrientation_Acc
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_9
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_manager_init
</UL>

<P><STRONG><a name="[23d]"></a>MotionAR_Update</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, motion_ar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = MotionAR_Update &rArr; ActivityRecognizerFunction &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_manager_run
</UL>

<P><STRONG><a name="[50b]"></a>MotionAR_Reset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motion_ar.o(.text), UNUSED)

<P><STRONG><a name="[23e]"></a>MotionAR_GetLibVersion</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, motion_ar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionAR_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_manager_init
</UL>

<P><STRONG><a name="[4ba]"></a>MotionCP_Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motion_cp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_manager_init
</UL>

<P><STRONG><a name="[24a]"></a>MotionCP_SetOrientation_Acc</STRONG> (Thumb, 320 bytes, Stack size 16 bytes, motion_cp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotionCP_SetOrientation_Acc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_manager_init
</UL>

<P><STRONG><a name="[24c]"></a>MotionCP_Update</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, motion_cp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = MotionCP_Update &rArr; CarryPositionRecognizerFunction &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
</UL>
<BR>[Called By]<UL><LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_manager_run
</UL>

<P><STRONG><a name="[24d]"></a>MotionCP_GetLibVersion</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, motion_cp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionCP_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_manager_init
</UL>

<P><STRONG><a name="[50c]"></a>iNemoEngine_API_get_debug_structures</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[269]"></a>MotionFX_initialize</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionFX_initialize &rArr; iNemoEngine_API_initialize &rArr; iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[26b]"></a>MotionFX_setKnobs</STRONG> (Thumb, 282 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MotionFX_setKnobs &rArr; iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_setOrientation
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[4c3]"></a>MotionFX_getKnobs</STRONG> (Thumb, 180 bytes, Stack size 8 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MotionFX_getKnobs
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[50d]"></a>MotionFX_getStatus_6X</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[50e]"></a>MotionFX_getStatus_9X</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[26c]"></a>MotionFX_enable_6X</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotionFX_enable_6X &rArr; AsyncHeadway_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncHeadway_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[26e]"></a>MotionFX_enable_9X</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotionFX_enable_9X &rArr; AsyncHeadway_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncHeadway_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[50f]"></a>MotionFX_setGbias</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[510]"></a>MotionFX_getGbias</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, motion_fx.o(.text), UNUSED)

<P><STRONG><a name="[26f]"></a>MotionFX_update</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = MotionFX_update &rArr; iNemoEngine_API_Update &rArr; iNemoEngine_9p6_Update &rArr; SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
</UL>

<P><STRONG><a name="[271]"></a>MotionFX_propagate</STRONG> (Thumb, 458 bytes, Stack size 32 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = MotionFX_propagate &rArr; iNemo_propagate_6X &rArr; output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
</UL>

<P><STRONG><a name="[274]"></a>MotionFX_MagCal_init</STRONG> (Thumb, 546 bytes, Stack size 120 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = MotionFX_MagCal_init &rArr; MotionFX_SaveMagCalInNVM &rArr; SaveCalibrationToMemory &rArr; Term_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_SaveMagCalInNVM
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_LoadMagCalFromNVM
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_stop
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_start
</UL>

<P><STRONG><a name="[277]"></a>MotionFX_MagCal_run</STRONG> (Thumb, 614 bytes, Stack size 48 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2088<LI>Call Chain = MotionFX_MagCal_run &rArr; MEMS_runMagCal &rArr; MEMS_runCalibration &rArr; MEMS_solveEllipsoid &rArr; computeEllipsoidHICoeff &rArr; getMagStats &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal
</UL>
<BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_run
</UL>

<P><STRONG><a name="[4bf]"></a>MotionFX_MagCal_getParams</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_run
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[278]"></a>MotionFX_GetLibVersion</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionFX_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
</UL>

<P><STRONG><a name="[4c7]"></a>MotionGR_Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motion_gr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_manager_init
</UL>

<P><STRONG><a name="[28a]"></a>MotionGR_SetOrientation_Acc</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, motion_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotionGR_SetOrientation_Acc
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_manager_init
</UL>

<P><STRONG><a name="[28b]"></a>MotionGR_Update</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, motion_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = MotionGR_Update &rArr; DetectAndroidLGestures &rArr; DetectPickUpGesture &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_manager_run
</UL>

<P><STRONG><a name="[28d]"></a>MotionGR_GetLibVersion</STRONG> (Thumb, 160 bytes, Stack size 64 bytes, motion_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionGR_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_manager_init
</UL>

<P><STRONG><a name="[4ca]"></a>MotionID_Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motion_id.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_manager_init
</UL>

<P><STRONG><a name="[28e]"></a>MotionID_Update</STRONG> (Thumb, 592 bytes, Stack size 64 bytes, motion_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MotionID_Update &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_manager_run
</UL>

<P><STRONG><a name="[511]"></a>MotionID_ResetLib</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, motion_id.o(.text), UNUSED)

<P><STRONG><a name="[28f]"></a>MotionID_GetLibVersion</STRONG> (Thumb, 52 bytes, Stack size 64 bytes, motion_id.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionID_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_manager_init
</UL>

<P><STRONG><a name="[4cd]"></a>MotionPM_Initialize</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, motion_pm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_manager_init
</UL>

<P><STRONG><a name="[293]"></a>MotionPM_Update</STRONG> (Thumb, 924 bytes, Stack size 288 bytes, motion_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5400<LI>Call Chain = MotionPM_Update &rArr; runStepDetection &rArr; FilterData &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_manager_run
</UL>

<P><STRONG><a name="[294]"></a>MotionPM_GetLibVersion</STRONG> (Thumb, 58 bytes, Stack size 64 bytes, motion_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = MotionPM_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_manager_init
</UL>

<P><STRONG><a name="[295]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[512]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[513]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[514]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[4b4]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_SaveGMD
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_ReCallGMD
</UL>

<P><STRONG><a name="[27f]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_Update
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[25c]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[4d0]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[515]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[298]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[516]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[517]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[297]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_SetOrientation_Acc
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_SetOrientation_Acc
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[518]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[299]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[240]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_GetLibVersion
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_GetLibVersion
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_GetLibVersion
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_GetLibVersion
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_GetLibVersion
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_GetLibVersion
</UL>

<P><STRONG><a name="[23f]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_GetLibVersion
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_GetLibVersion
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_GetLibVersion
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_GetLibVersion
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_GetLibVersion
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_GetLibVersion
</UL>

<P><STRONG><a name="[309]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
</UL>

<P><STRONG><a name="[29a]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
</UL>

<P><STRONG><a name="[243]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterData
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[238]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_Update
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
</UL>

<P><STRONG><a name="[244]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterData
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[242]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_Update
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterData
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[247]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_Update
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
</UL>

<P><STRONG><a name="[27a]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
</UL>

<P><STRONG><a name="[280]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[292]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
</UL>

<P><STRONG><a name="[25a]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_Update
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[235]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_Update
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_Update
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_Update
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>

<P><STRONG><a name="[258]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[245]"></a>__aeabi_cdcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewBufferIndex2
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
</UL>

<P><STRONG><a name="[246]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewBufferIndex2
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>

<P><STRONG><a name="[233]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_Update
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_interp1q_constrain
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>

<P><STRONG><a name="[29d]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[519]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[2a1]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[51a]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[29e]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[51b]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2a9]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[29c]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[51c]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[2a2]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>

<P><STRONG><a name="[51d]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text), UNUSED)

<P><STRONG><a name="[2a5]"></a>_frnd</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, frnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>

<P><STRONG><a name="[2a0]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[29f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2a6]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[2a7]"></a>_drnd</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, drnd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _drnd &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
</UL>

<P><STRONG><a name="[4f0]"></a>__ARM_dcmp4</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, dcmp4.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmax
</UL>

<P><STRONG><a name="[51e]"></a>_dcmp4</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dcmp4.o(.text), UNUSED)

<P><STRONG><a name="[231]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[51f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[2a3]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[2a4]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[520]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[521]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2aa]"></a>AccEvent_Notify</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sensor_service.o(i.AccEvent_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = AccEvent_Notify &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b0]"></a>AccGyroMag_Update</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, sensor_service.o(i.AccGyroMag_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = AccGyroMag_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_aci_gatt_update_char_value
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b2]"></a>AccPedo_Update</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, sensor_service.o(i.AccPedo_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = AccPedo_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b3]"></a>ActivityRec_Update</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sensor_service.o(i.ActivityRec_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ActivityRec_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b4]"></a>Add_ConfigW2ST_Service</STRONG> (Thumb, 230 bytes, Stack size 80 bytes, sensor_service.o(i.Add_ConfigW2ST_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Add_ConfigW2ST_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b7]"></a>Add_ConsoleW2ST_Service</STRONG> (Thumb, 344 bytes, Stack size 80 bytes, sensor_service.o(i.Add_ConsoleW2ST_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Add_ConsoleW2ST_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b8]"></a>Add_HWServW2ST_Service</STRONG> (Thumb, 674 bytes, Stack size 80 bytes, sensor_service.o(i.Add_HWServW2ST_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Add_HWServW2ST_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2b9]"></a>Add_SWServW2ST_Service</STRONG> (Thumb, 1036 bytes, Stack size 80 bytes, sensor_service.o(i.Add_SWServW2ST_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = Add_SWServW2ST_Service &rArr; aci_gatt_add_char &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ba]"></a>Attribute_Modified_CB</STRONG> (Thumb, 2110 bytes, Stack size 40 bytes, sensor_service.o(i.Attribute_Modified_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 904<LI>Call Chain = Attribute_Modified_CB &rArr; DebugConsoleCommandParsing &rArr;  getBlueNRGVersion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SystemReset
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set4GAccelerometerFullScale
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set2GAccelerometerFullScale
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
</UL>

<P><STRONG><a name="[1c8]"></a>BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
</UL>
<P><STRONG><a name="[1c9]"></a>BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_6D_Orientation_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
</UL>
<P><STRONG><a name="[1c2]"></a>BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
</UL>
<P><STRONG><a name="[1c3]"></a>BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Double_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
</UL>
<P><STRONG><a name="[1c6]"></a>BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWFreeFall)
</UL>
<P><STRONG><a name="[1c7]"></a>BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Free_Fall_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWFreeFall)
</UL>
<P><STRONG><a name="[1ca]"></a>BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWPedometer)
</UL>
<P><STRONG><a name="[1cb]"></a>BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Pedometer_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWPedometer)
</UL>
<P><STRONG><a name="[1cc]"></a>BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWSingleTap)
</UL>
<P><STRONG><a name="[1cd]"></a>BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Single_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWSingleTap)
</UL>
<P><STRONG><a name="[1ce]"></a>BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWTilt)
</UL>
<P><STRONG><a name="[1cf]"></a>BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Tilt_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWTilt)
</UL>
<P><STRONG><a name="[1d0]"></a>BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWWakeUp)
</UL>
<P><STRONG><a name="[1d1]"></a>BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Disable_Wake_Up_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.DisableHWWakeUp)
</UL>
<P><STRONG><a name="[1d6]"></a>BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWOrientation6D)
</UL>
<P><STRONG><a name="[1d7]"></a>BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_6D_Orientation_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWOrientation6D)
</UL>
<P><STRONG><a name="[1d2]"></a>BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWDoubleTap)
</UL>
<P><STRONG><a name="[1d3]"></a>BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Double_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWDoubleTap)
</UL>
<P><STRONG><a name="[1d4]"></a>BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWFreeFall)
</UL>
<P><STRONG><a name="[1d5]"></a>BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Free_Fall_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWFreeFall)
</UL>
<P><STRONG><a name="[1d8]"></a>BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWPedometer)
</UL>
<P><STRONG><a name="[1d9]"></a>BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Pedometer_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWPedometer)
</UL>
<P><STRONG><a name="[1da]"></a>BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWSingleTap)
</UL>
<P><STRONG><a name="[1db]"></a>BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Single_Tap_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWSingleTap)
</UL>
<P><STRONG><a name="[1dc]"></a>BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWTilt)
</UL>
<P><STRONG><a name="[1dd]"></a>BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Tilt_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWTilt)
</UL>
<P><STRONG><a name="[1de]"></a>BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWWakeUp)
</UL>
<P><STRONG><a name="[1df]"></a>BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Enable_Wake_Up_Detection_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.EnableHWWakeUp)
</UL>
<P><STRONG><a name="[224]"></a>BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[225]"></a>BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1e3]"></a>BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e2]"></a>BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XH_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e0]"></a>BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e1]"></a>BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_XL_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e7]"></a>BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e6]"></a>BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YH_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e5]"></a>BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e4]"></a>BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_YL_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1eb]"></a>BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1ea]"></a>BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZH_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e9]"></a>BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[1e8]"></a>BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_6D_Orientation_ZL_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetHWOrientation6D)
</UL>
<P><STRONG><a name="[22f]"></a>BSP_ACCELERO_Get_AxesRaw_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_AxesRaw_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_AxesRaw_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[22e]"></a>BSP_ACCELERO_Get_AxesRaw_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_AxesRaw_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_AxesRaw_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[228]"></a>BSP_ACCELERO_Get_Axes_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Axes_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[229]"></a>BSP_ACCELERO_Get_Axes_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Axes_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Axes_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21c]"></a>BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21d]"></a>BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Double_Tap_Detection_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21a]"></a>BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21b]"></a>BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Free_Fall_Detection_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1ef]"></a>BSP_ACCELERO_Get_ODR_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_ODR_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.InitHWFeatures)
</UL>
<P><STRONG><a name="[1ee]"></a>BSP_ACCELERO_Get_ODR_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_ODR_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_ODR_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.InitHWFeatures)
</UL>
<P><STRONG><a name="[226]"></a>BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[227]"></a>BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Pedometer_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[217]"></a>BSP_ACCELERO_Get_Sensitivity_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Sensitivity_IKS01A1
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.Set2GAccelerometerFullScale)
<LI> main.o(i.Set4GAccelerometerFullScale)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[216]"></a>BSP_ACCELERO_Get_Sensitivity_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Sensitivity_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_Sensitivity_IKS01A2
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.Set2GAccelerometerFullScale)
<LI> main.o(i.Set4GAccelerometerFullScale)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21e]"></a>BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[21f]"></a>BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Single_Tap_Detection_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1ec]"></a>BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetStepHWPedometer)
</UL>
<P><STRONG><a name="[1ed]"></a>BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Step_Count_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.GetStepHWPedometer)
</UL>
<P><STRONG><a name="[222]"></a>BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[223]"></a>BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Tilt_Detection_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[220]"></a>BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A1</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A1))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[221]"></a>BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A2</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Get_Wake_Up_Detection_Status_Ext_IKS01A2))
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[380]"></a>BSP_ACCELERO_Get_WhoAmI_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Get_WhoAmI_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Get_WhoAmI_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
</UL>

<P><STRONG><a name="[2ca]"></a>BSP_ACCELERO_Init_IKS01A1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_ACCELERO_Init_IKS01A1 &rArr; BSP_LSM6DS3_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
</UL>

<P><STRONG><a name="[2cd]"></a>BSP_ACCELERO_Init_IKS01A2</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_ACCELERO_Init_IKS01A2 &rArr; BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
</UL>

<P><STRONG><a name="[212]"></a>BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A1</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A1 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.ResetHWPedometer)
</UL>
<P><STRONG><a name="[213]"></a>BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A2</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A2 &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hwadvancefeatures.o(i.ResetHWPedometer)
</UL>
<P><STRONG><a name="[1fa]"></a>BSP_ACCELERO_Sensor_Enable_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1fb]"></a>BSP_ACCELERO_Sensor_Enable_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[215]"></a>BSP_ACCELERO_Set_FS_Value_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_FS_Value_IKS01A1
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.Set2GAccelerometerFullScale)
<LI> main.o(i.Set4GAccelerometerFullScale)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[214]"></a>BSP_ACCELERO_Set_FS_Value_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_FS_Value_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_FS_Value_IKS01A2
</UL>
<BR>[Address Reference Count : 3]<UL><LI> main.o(i.Set2GAccelerometerFullScale)
<LI> main.o(i.Set4GAccelerometerFullScale)
<LI> main.o(i.main)
</UL>
<P><STRONG><a name="[315]"></a>BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A1))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
</UL>

<P><STRONG><a name="[314]"></a>BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A2))
<BR><BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
</UL>

<P><STRONG><a name="[1c5]"></a>BSP_ACCELERO_Set_ODR_Value_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_ODR_Value_IKS01A1
</UL>
<BR>[Address Reference Count : 7]<UL><LI> hwadvancefeatures.o(i.DisableHWFreeFall)
<LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
<LI> hwadvancefeatures.o(i.DisableHWPedometer)
<LI> hwadvancefeatures.o(i.DisableHWSingleTap)
<LI> hwadvancefeatures.o(i.DisableHWTilt)
<LI> hwadvancefeatures.o(i.DisableHWWakeUp)
<LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
</UL>
<P><STRONG><a name="[1c4]"></a>BSP_ACCELERO_Set_ODR_Value_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_ODR_Value_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_ACCELERO_Set_ODR_Value_IKS01A2
</UL>
<BR>[Address Reference Count : 7]<UL><LI> hwadvancefeatures.o(i.DisableHWFreeFall)
<LI> hwadvancefeatures.o(i.DisableHWOrientation6D)
<LI> hwadvancefeatures.o(i.DisableHWPedometer)
<LI> hwadvancefeatures.o(i.DisableHWSingleTap)
<LI> hwadvancefeatures.o(i.DisableHWTilt)
<LI> hwadvancefeatures.o(i.DisableHWWakeUp)
<LI> hwadvancefeatures.o(i.DisableHWDoubleTap)
</UL>
<P><STRONG><a name="[313]"></a>BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A1</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A1))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
</UL>

<P><STRONG><a name="[312]"></a>BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A2</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A2))
<BR><BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
</UL>

<P><STRONG><a name="[22d]"></a>BSP_GYRO_Get_Axes_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Get_Axes_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[22c]"></a>BSP_GYRO_Get_Axes_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Get_Axes_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Get_Axes_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1f1]"></a>BSP_GYRO_Init_IKS01A1</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_GYRO_Init_IKS01A1 &rArr; BSP_LSM6DS3_GYRO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1f0]"></a>BSP_GYRO_Init_IKS01A2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_GYRO_Init_IKS01A2 &rArr; BSP_LSM6DSL_GYRO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1fc]"></a>BSP_GYRO_Sensor_Enable_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1fd]"></a>BSP_GYRO_Sensor_Enable_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_GYRO_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GYRO_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[20d]"></a>BSP_HUMIDITY_Get_Hum_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum_IKS01A1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[20c]"></a>BSP_HUMIDITY_Get_Hum_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Get_Hum_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Get_Hum_IKS01A2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[1f5]"></a>BSP_HUMIDITY_Init_IKS01A1</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_HUMIDITY_Init_IKS01A1 &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1f4]"></a>BSP_HUMIDITY_Init_IKS01A2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_HUMIDITY_Init_IKS01A2 &rArr; BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[20a]"></a>BSP_HUMIDITY_IsInitialized_IKS01A1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A1))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[20b]"></a>BSP_HUMIDITY_IsInitialized_IKS01A2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_IsInitialized_IKS01A2))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[200]"></a>BSP_HUMIDITY_Sensor_Enable_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[201]"></a>BSP_HUMIDITY_Sensor_Enable_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HUMIDITY_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_HUMIDITY_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[2d9]"></a>BSP_LED_Init</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_LED_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
</UL>

<P><STRONG><a name="[2dc]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_Off))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffTargetPlatform
</UL>

<P><STRONG><a name="[2dd]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_nucleo.o(i.BSP_LED_On))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnTargetPlatform
</UL>

<P><STRONG><a name="[22b]"></a>BSP_MAGNETO_Get_Axes_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Get_Axes_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[22a]"></a>BSP_MAGNETO_Get_Axes_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Get_Axes_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Get_Axes_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[1f3]"></a>BSP_MAGNETO_Init_IKS01A1</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_MAGNETO_Init_IKS01A1 &rArr; BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1f2]"></a>BSP_MAGNETO_Init_IKS01A2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_MAGNETO_Init_IKS01A2 &rArr; BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1fe]"></a>BSP_MAGNETO_Sensor_Enable_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1ff]"></a>BSP_MAGNETO_Sensor_Enable_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_MAGNETO_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_MAGNETO_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[2ec]"></a>BSP_PB_Init</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, stm32f4xx_nucleo.o(i.BSP_PB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = BSP_PB_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
</UL>

<P><STRONG><a name="[209]"></a>BSP_PRESSURE_Get_Press_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Get_Press_IKS01A1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[208]"></a>BSP_PRESSURE_Get_Press_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Get_Press_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Get_Press_IKS01A2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[1f9]"></a>BSP_PRESSURE_Init_IKS01A1</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_PRESSURE_Init_IKS01A1 &rArr; BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1f8]"></a>BSP_PRESSURE_Init_IKS01A2</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_PRESSURE_Init_IKS01A2 &rArr; BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[206]"></a>BSP_PRESSURE_IsInitialized_IKS01A1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A1))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[207]"></a>BSP_PRESSURE_IsInitialized_IKS01A2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_IsInitialized_IKS01A2))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[204]"></a>BSP_PRESSURE_Sensor_Enable_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[205]"></a>BSP_PRESSURE_Sensor_Enable_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_PRESSURE_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_PRESSURE_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[211]"></a>BSP_TEMPERATURE_Get_Temp_IKS01A1</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp_IKS01A1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[210]"></a>BSP_TEMPERATURE_Get_Temp_IKS01A2</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Get_Temp_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Get_Temp_IKS01A2
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[1f7]"></a>BSP_TEMPERATURE_Init_IKS01A1</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BSP_TEMPERATURE_Init_IKS01A1 &rArr; BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[1f6]"></a>BSP_TEMPERATURE_Init_IKS01A2</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_TEMPERATURE_Init_IKS01A2 &rArr; BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[20f]"></a>BSP_TEMPERATURE_IsInitialized_IKS01A1</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A1))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[20e]"></a>BSP_TEMPERATURE_IsInitialized_IKS01A2</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_IsInitialized_IKS01A2))
<BR>[Address Reference Count : 2]<UL><LI> main.o(i.SendEnvironmentalData)
<LI> sensor_service.o(i.Read_Request_CB)
</UL>
<P><STRONG><a name="[202]"></a>BSP_TEMPERATURE_Sensor_Enable_IKS01A1</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable_IKS01A1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[203]"></a>BSP_TEMPERATURE_Sensor_Enable_IKS01A2</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_TEMPERATURE_Sensor_Enable_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_TEMPERATURE_Sensor_Enable_IKS01A2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> targetplatform.o(i.Init_MEM1_Sensors)
</UL>
<P><STRONG><a name="[2ef]"></a>BlueNRG_DataPresent</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32_bluenrg_ble.o(i.BlueNRG_DataPresent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BlueNRG_DataPresent
</UL>
<BR>[Calls]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
</UL>

<P><STRONG><a name="[2f1]"></a>BlueNRG_RST</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32_bluenrg_ble.o(i.BlueNRG_RST))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BlueNRG_RST &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f2]"></a>BlueNRG_SPI_Read_All</STRONG> (Thumb, 142 bytes, Stack size 56 bytes, stm32_bluenrg_ble.o(i.BlueNRG_SPI_Read_All))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
</UL>

<P><STRONG><a name="[2f4]"></a>BlueNRG_SPI_Write</STRONG> (Thumb, 170 bytes, Stack size 312 bytes, stm32_bluenrg_ble.o(i.BlueNRG_SPI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
</UL>

<P><STRONG><a name="[181]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2f6]"></a>CarryPosRec_Update</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sensor_service.o(i.CarryPosRec_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = CarryPosRec_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[502]"></a>CheckBootLoaderCompliance</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ota.o(i.CheckBootLoaderCompliance))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35d]"></a>Clear_SPI_EXTI_Flag</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32_bluenrg_ble.o(i.Clear_SPI_EXTI_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
</UL>

<P><STRONG><a name="[2f9]"></a>Config_Notify</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, sensor_service.o(i.Config_Notify))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = Config_Notify &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[184]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2fb]"></a>DisableHWDoubleTap</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWDoubleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWDoubleTap &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[2c1]"></a>DisableHWFeatures</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.DisableHWFeatures))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWWakeUp
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWTilt
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWSingleTap
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWPedometer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWOrientation6D
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFreeFall
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWDoubleTap
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWWakeUp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWTilt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWSingleTap
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWPedometer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWOrientation6D
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[2f8]"></a>DisableHWFreeFall</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWFreeFall))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWFreeFall &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[306]"></a>DisableHWOrientation6D</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWOrientation6D))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWOrientation6D &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[300]"></a>DisableHWPedometer</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWPedometer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[2fd]"></a>DisableHWSingleTap</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWSingleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWSingleTap &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[304]"></a>DisableHWTilt</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWTilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWTilt &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[302]"></a>DisableHWWakeUp</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hwadvancefeatures.o(i.DisableHWWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[30f]"></a>Disable_SPI_IRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_bluenrg_ble.o(i.Disable_SPI_IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_DisableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[310]"></a>ECompass_Update</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, sensor_service.o(i.ECompass_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ECompass_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_aci_gatt_update_char_value
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EXTI0_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HCI_Isr &rArr; BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1aa]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EXTI15_10_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HCI_Isr &rArr; BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[191]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EXTI4_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HCI_Isr &rArr; BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[19a]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EXTI9_5_IRQHandler &rArr; HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HCI_Isr &rArr; BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[2fa]"></a>EnableHWDoubleTap</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWDoubleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWDoubleTap &rArr; DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A2
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Tap_Threshold_Ext_IKS01A1
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[2f7]"></a>EnableHWFreeFall</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWFreeFall))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWFreeFall &rArr; DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A2
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Set_Free_Fall_Threshold_Ext_IKS01A1
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[305]"></a>EnableHWOrientation6D</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWOrientation6D))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWOrientation6D &rArr; DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[2fe]"></a>EnableHWPedometer</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWPedometer &rArr; DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[2fc]"></a>EnableHWSingleTap</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWSingleTap))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWSingleTap &rArr; DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[303]"></a>EnableHWTilt</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWTilt))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWTilt &rArr; DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[301]"></a>EnableHWWakeUp</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.EnableHWWakeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EnableHWWakeUp &rArr; DisableHWFeatures &rArr; DisableHWWakeUp &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[316]"></a>Enable_SPI_IRQ</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32_bluenrg_ble.o(i.Enable_SPI_IRQ))
<BR><BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[317]"></a>Environmental_Update</STRONG> (Thumb, 208 bytes, Stack size 40 bytes, sensor_service.o(i.Environmental_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = Environmental_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
</UL>

<P><STRONG><a name="[318]"></a>EraseMetaDataManager</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, metadatamanager.o(i.EraseMetaDataManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = EraseMetaDataManager &rArr; UserFunctionForErasingFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2bc]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
</UL>

<P><STRONG><a name="[324]"></a>FLASH_FlushCaches</STRONG> (Thumb, 86 bytes, Stack size 0 bytes, stm32f4xx_hal_flash_ex.o(i.FLASH_FlushCaches))
<BR><BR>[Called By]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[31a]"></a>FLASH_WaitForLastOperation</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, stm32f4xx_hal_flash.o(i.FLASH_WaitForLastOperation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_SetErrorCode
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>

<P><STRONG><a name="[31c]"></a>GestureRec_Update</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sensor_service.o(i.GestureRec_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = GestureRec_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31d]"></a>GetHWOrientation6D</STRONG> (Thumb, 414 bytes, Stack size 48 bytes, hwadvancefeatures.o(i.GetHWOrientation6D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GetHWOrientation6D &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31e]"></a>GetStepHWPedometer</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.GetStepHWPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetStepHWPedometer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4dc]"></a>HAL_CRC_Calculate</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_Calculate
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
</UL>

<P><STRONG><a name="[31f]"></a>HAL_CRC_DeInit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CRC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
</UL>

<P><STRONG><a name="[4db]"></a>HAL_CRC_GetState</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
</UL>

<P><STRONG><a name="[321]"></a>HAL_CRC_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f4xx_hal_crc.o(i.HAL_CRC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_CRC_Init &rArr; HAL_CRC_MspInit
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[320]"></a>HAL_CRC_MspDeInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_msp.o(i.HAL_CRC_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
</UL>

<P><STRONG><a name="[322]"></a>HAL_CRC_MspInit</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, stm32f4xx_hal_msp.o(i.HAL_CRC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_CRC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>

<P><STRONG><a name="[2c5]"></a>HAL_Delay</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, main.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A2
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Reset_Step_Counter_Ext_IKS01A1
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
</UL>

<P><STRONG><a name="[323]"></a>HAL_FLASHEx_Erase</STRONG> (Thumb, 262 bytes, Stack size 32 bytes, stm32f4xx_hal_flash_ex.o(i.HAL_FLASHEx_Erase))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_FlushCaches
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFWBlueMS
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
</UL>

<P><STRONG><a name="[4d7]"></a>HAL_FLASH_Lock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Lock))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFWBlueMS
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
</UL>

<P><STRONG><a name="[325]"></a>HAL_FLASH_Program</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Program))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
</UL>

<P><STRONG><a name="[4d6]"></a>HAL_FLASH_Unlock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.HAL_FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateFWBlueMS
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFWBlueMS
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
</UL>

<P><STRONG><a name="[326]"></a>HAL_GPIO_EXTI_Callback</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, main.o(i.HAL_GPIO_EXTI_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = HAL_GPIO_EXTI_Callback &rArr; HCI_Isr &rArr; BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
</UL>
<BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_IRQHandler
</UL>

<P><STRONG><a name="[311]"></a>HAL_GPIO_EXTI_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_EXTI_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = HAL_GPIO_EXTI_IRQHandler &rArr; HAL_GPIO_EXTI_Callback &rArr; HCI_Isr &rArr; BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[2da]"></a>HAL_GPIO_Init</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
</UL>

<P><STRONG><a name="[2f0]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_DataPresent
</UL>

<P><STRONG><a name="[2db]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Read_All
</UL>

<P><STRONG><a name="[30a]"></a>HAL_GetHalVersion</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetHalVersion))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ab]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quat_Update
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntensityDet_Update
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GestureRec_Update
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environmental_Update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECompass_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPosRec_Update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRec_Update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccPedo_Update
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyroMag_Update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccEvent_Notify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>

<P><STRONG><a name="[328]"></a>HAL_I2C_DeInit</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_I2C_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
</UL>

<P><STRONG><a name="[376]"></a>HAL_I2C_GetState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
</UL>

<P><STRONG><a name="[32a]"></a>HAL_I2C_Init</STRONG> (Thumb, 254 bytes, Stack size 16 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
</UL>

<P><STRONG><a name="[32d]"></a>HAL_I2C_Mem_Read</STRONG> (Thumb, 548 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnRXNEFlagUntilTimeout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[331]"></a>HAL_I2C_Mem_Write</STRONG> (Thumb, 340 bytes, Stack size 64 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_Mem_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnBTFFlagUntilTimeout
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>

<P><STRONG><a name="[329]"></a>HAL_I2C_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_i2c.o(i.HAL_I2C_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>

<P><STRONG><a name="[32b]"></a>HAL_I2C_MspInit</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, stm32f4xx_hal_msp.o(i.HAL_I2C_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
</UL>

<P><STRONG><a name="[4d8]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[335]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[337]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[338]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2f5]"></a>HAL_NVIC_DisableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>

<P><STRONG><a name="[2ee]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
</UL>

<P><STRONG><a name="[2ed]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_MspInit
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[336]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2c6]"></a>HAL_NVIC_SystemReset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[33a]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 430 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[32c]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[4da]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[33b]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 128 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[33c]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 944 bytes, Stack size 40 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[33d]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Global_Init
</UL>

<P><STRONG><a name="[33e]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 306 bytes, Stack size 56 bytes, stm32f4xx_hal_msp.o(i.HAL_SPI_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 674 bytes, Stack size 40 bytes, stm32f4xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Read_All
</UL>

<P><STRONG><a name="[339]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[349]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[34b]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[341]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[342]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[2c2]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[2c3]"></a>HAL_TIM_Base_Stop_IT</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Stop_IT))
<BR><BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[345]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[344]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 364 bytes, Stack size 16 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_CC_IRQHandler
</UL>

<P><STRONG><a name="[34c]"></a>HAL_TIM_OC_ConfigChannel</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_OC_ConfigChannel &rArr; TIM_OC2_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2_SetConfig
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[346]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 174 bytes, Stack size 24 bytes, main.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ReadCapturedValue
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[350]"></a>HAL_TIM_OC_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_TIM_OC_Init &rArr; HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_MspInit
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[351]"></a>HAL_TIM_OC_MspInit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_OC_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_OC_MspInit &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_TIM_OC_Start_IT</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Start_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_OC_Start_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[2bd]"></a>HAL_TIM_OC_Stop_IT</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_Stop_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_OC_Stop_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[347]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[348]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[34f]"></a>HAL_TIM_ReadCapturedValue</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ReadCapturedValue))
<BR><BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
</UL>

<P><STRONG><a name="[34a]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[4d9]"></a>HAL_UART_GetState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_GetState))
<BR><BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Global_Init
</UL>

<P><STRONG><a name="[353]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Global_Init
</UL>

<P><STRONG><a name="[354]"></a>HAL_UART_MspInit</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, stm32f4xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[356]"></a>HAL_UART_Transmit</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[358]"></a>HCI_Event_CB</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, sensor_service.o(i.HCI_Event_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = HCI_Event_CB &rArr; Attribute_Modified_CB &rArr; DebugConsoleCommandParsing &rArr;  getBlueNRGVersion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFeatures
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Stop_IT
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
</UL>

<P><STRONG><a name="[35a]"></a>HCI_Init</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, hci.o(i.HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HCI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init_head
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[327]"></a>HCI_Isr</STRONG> (Thumb, 118 bytes, Stack size 8 bytes, hci.o(i.HCI_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = HCI_Isr &rArr; BlueNRG_SPI_Read_All &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clear_SPI_EXTI_Flag
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Read_All
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_DataPresent
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_head
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_EXTI_Callback
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[361]"></a>HCI_Process</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, hci.o(i.HCI_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = HCI_Process &rArr; HCI_Event_CB &rArr; Attribute_Modified_CB &rArr; DebugConsoleCommandParsing &rArr;  getBlueNRGVersion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBlueNRGVersion
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[362]"></a>HTS221_Activate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Enable
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Enable
</UL>

<P><STRONG><a name="[365]"></a>HTS221_DeActivate</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Sensor_Disable
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_DeInit
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Sensor_Disable
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_DeInit
</UL>

<P><STRONG><a name="[366]"></a>HTS221_Get_DataStatus</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_DRDY_Status
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_DRDY_Status
</UL>

<P><STRONG><a name="[367]"></a>HTS221_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_WhoAmI
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Check_WhoAmI
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_WhoAmI
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Check_WhoAmI
</UL>

<P><STRONG><a name="[368]"></a>HTS221_Get_Humidity</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, hts221_driver.o(i.HTS221_Get_Humidity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_Hum
</UL>

<P><STRONG><a name="[369]"></a>HTS221_Get_Odr</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_ODR
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Get_ODR
</UL>

<P><STRONG><a name="[36a]"></a>HTS221_Get_Temperature</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, hts221_driver.o(i.HTS221_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Get_Temp
</UL>

<P><STRONG><a name="[363]"></a>HTS221_ReadReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Read_Reg
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Read_Reg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[36e]"></a>HTS221_Set_BduMode</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_BduMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Set_BduMode &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>

<P><STRONG><a name="[36d]"></a>HTS221_Set_Odr</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, hts221_driver.o(i.HTS221_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR_Value
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR_Value
</UL>

<P><STRONG><a name="[364]"></a>HTS221_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hts221_driver.o(i.HTS221_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Write_Reg
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Write_Reg
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>

<P><STRONG><a name="[371]"></a>HTS221_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hts221_driver.o(i.HTS221_assert_failed), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[372]"></a>Hal_Write_Serial</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, stm32_bluenrg_ble.o(i.Hal_Write_Serial))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_SPI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[17f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[375]"></a>I2C_Global_Error</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_Global_Error))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Global_Error &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>

<P><STRONG><a name="[377]"></a>I2C_Global_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_i2c.o(i.I2C_Global_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
</UL>

<P><STRONG><a name="[501]"></a>InitHWFeatures</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hwadvancefeatures.o(i.InitHWFeatures))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[379]"></a>InitMetaDataManager</STRONG> (Thumb, 1548 bytes, Stack size 64 bytes, metadatamanager.o(i.InitMetaDataManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = InitMetaDataManager &rArr; UserFunctionForErasingFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForErasingFlash
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReseMetaDataManager
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37c]"></a>InitTargetPlatform</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, targetplatform.o(i.InitTargetPlatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = InitTargetPlatform &rArr; Init_MEM1_Sensors &rArr; BSP_ACCELERO_Init_IKS01A2 &rArr; BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Global_Init
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Global_Init
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PB_Init
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[381]"></a>IntensityDet_Update</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sensor_service.o(i.IntensityDet_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = IntensityDet_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c8]"></a>LED_Update</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sensor_service.o(i.LED_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = LED_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[384]"></a>LIS3MDL_MAG_Get_Magnetic</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_Get_Magnetic))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_AxesRaw
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes
</UL>

<P><STRONG><a name="[385]"></a>LIS3MDL_MAG_R_FullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Sensitivity
<LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_FS
<LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_Axes
</UL>

<P><STRONG><a name="[386]"></a>LIS3MDL_MAG_R_NewXYZData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_NewXYZData))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_MAG_R_NewXYZData &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_DRDY_Status
</UL>

<P><STRONG><a name="[387]"></a>LIS3MDL_MAG_R_OutputDataRate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_OutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_MAG_R_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_ODR
</UL>

<P><STRONG><a name="[382]"></a>LIS3MDL_MAG_R_WHO_AM_I_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_R_WHO_AM_I_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Get_WhoAmI
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_DeInit
<LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Check_WhoAmI
</UL>

<P><STRONG><a name="[38d]"></a>LIS3MDL_MAG_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Read_Reg
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_OutputDataRate
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_NewXYZData
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_Get_Magnetic
</UL>

<P><STRONG><a name="[388]"></a>LIS3MDL_MAG_W_BlockDataUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_W_BlockDataUpdate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[38a]"></a>LIS3MDL_MAG_W_FullScale</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS_Value
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_FS
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[38b]"></a>LIS3MDL_MAG_W_OperatingModeXY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_OperatingModeXY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_W_OperatingModeXY &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[389]"></a>LIS3MDL_MAG_W_OutputDataRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_OutputDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR_Value
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Set_ODR
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[383]"></a>LIS3MDL_MAG_W_SystemOperatingMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_SystemOperatingMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Enable
<LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Sensor_Disable
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_DeInit
</UL>

<P><STRONG><a name="[38c]"></a>LIS3MDL_MAG_W_TemperatureSensor</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_W_TemperatureSensor))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_MAG_W_TemperatureSensor &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Init
</UL>

<P><STRONG><a name="[38e]"></a>LIS3MDL_MAG_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3mdl_mag_driver.o(i.LIS3MDL_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LIS3MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_Write_Reg
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
</UL>

<P><STRONG><a name="[39b]"></a>LPS22HB_Get_DataStatus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_DRDY_Status
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[39d]"></a>LPS22HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_WhoAmI
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Check_WhoAmI
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_WhoAmI
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Check_WhoAmI
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[392]"></a>LPS22HB_Get_FifoMode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Mode
</UL>

<P><STRONG><a name="[391]"></a>LPS22HB_Get_FifoStatus</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Ovr_Status
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Num_Of_Samples
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Full_Status
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Fth_Status
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[393]"></a>LPS22HB_Get_FifoWatermarkLevel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_Get_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Watermark_Level
</UL>

<P><STRONG><a name="[39f]"></a>LPS22HB_Get_Odr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>

<P><STRONG><a name="[38f]"></a>LPS22HB_Get_Pressure</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Pressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_Press
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[390]"></a>LPS22HB_Get_Temperature</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Get_Temperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_Temp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Get_Data
</UL>

<P><STRONG><a name="[39c]"></a>LPS22HB_ReadReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Read_Reg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
<LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Read_Reg
</UL>

<P><STRONG><a name="[2e0]"></a>LPS22HB_Sensor_IO_ITConfig_IKS01A1</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, x_nucleo_iks01a1.o(i.LPS22HB_Sensor_IO_ITConfig_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_Sensor_IO_ITConfig_IKS01A1 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
</UL>

<P><STRONG><a name="[2e2]"></a>LPS22HB_Sensor_IO_ITConfig_IKS01A2</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, x_nucleo_iks01a2.o(i.LPS22HB_Sensor_IO_ITConfig_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LPS22HB_Sensor_IO_ITConfig_IKS01A2 &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
</UL>

<P><STRONG><a name="[3a6]"></a>LPS22HB_Set_AutomaticIncrementRegAddress</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_AutomaticIncrementRegAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_AutomaticIncrementRegAddress &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[3a5]"></a>LPS22HB_Set_Bdu</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_Bdu &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[395]"></a>LPS22HB_Set_FIFO_FTH_Interrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FTH_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FIFO_FTH_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[396]"></a>LPS22HB_Set_FIFO_FULL_Interrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_FULL_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FIFO_FULL_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[394]"></a>LPS22HB_Set_FIFO_OVR_Interrupt</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FIFO_OVR_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Interrupt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Reset_Interrupt
</UL>

<P><STRONG><a name="[397]"></a>LPS22HB_Set_FifoMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[39a]"></a>LPS22HB_Set_FifoModeUse</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoModeUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Usage
</UL>

<P><STRONG><a name="[398]"></a>LPS22HB_Set_FifoWatermarkLevel</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[399]"></a>LPS22HB_Set_FifoWatermarkLevelUse</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_FifoWatermarkLevelUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Watermark_Usage
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_FIFO_Stop_On_Fth
</UL>

<P><STRONG><a name="[3a3]"></a>LPS22HB_Set_LowPassFilter</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_LowPassFilter &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[3a4]"></a>LPS22HB_Set_LowPassFilterCutoff</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_LowPassFilterCutoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_LowPassFilterCutoff &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[3a2]"></a>LPS22HB_Set_Odr</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_DeInit
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Disable
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_DeInit
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Disable
</UL>

<P><STRONG><a name="[3a1]"></a>LPS22HB_Set_PowerMode</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lps22hb_driver.o(i.LPS22HB_Set_PowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>

<P><STRONG><a name="[3a8]"></a>LPS22HB_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps22hb_driver.o(i.LPS22HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Write_Reg
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Write_Reg
</UL>

<P><STRONG><a name="[3a9]"></a>LPS25HB_Activate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Activate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Enable
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Enable
</UL>

<P><STRONG><a name="[3ab]"></a>LPS25HB_DeActivate</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_DeActivate))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Sensor_Disable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_DeInit
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Sensor_Disable
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_DeInit
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[3ac]"></a>LPS25HB_Get_DataStatus</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_DataStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_DRDY_Status
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_DRDY_Status
</UL>

<P><STRONG><a name="[3ae]"></a>LPS25HB_Get_DeviceID</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_Get_DeviceID))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_WhoAmI
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Check_WhoAmI
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_WhoAmI
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Check_WhoAmI
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[3af]"></a>LPS25HB_Get_Odr</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_ODR
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_ODR
</UL>

<P><STRONG><a name="[3b0]"></a>LPS25HB_Get_Pressure</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Pressure))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Get_Pressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Get_Press
</UL>

<P><STRONG><a name="[3b1]"></a>LPS25HB_Get_Temperature</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Get_Temperature))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Get_Temperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Get_Temp
</UL>

<P><STRONG><a name="[3ad]"></a>LPS25HB_ReadReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Read_Reg
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Read_Reg
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>

<P><STRONG><a name="[3b7]"></a>LPS25HB_Set_Avg</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lps25hb_driver.o(i.LPS25HB_Set_Avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Set_Avg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[3b5]"></a>LPS25HB_Set_Bdu</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Bdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Set_Bdu &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[3b4]"></a>LPS25HB_Set_InterruptCircuitEnable</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_InterruptCircuitEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Set_InterruptCircuitEnable &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[3b8]"></a>LPS25HB_Set_Odr</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_Odr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR_Value
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR_Value
</UL>

<P><STRONG><a name="[3aa]"></a>LPS25HB_Set_PowerDownMode</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_PowerDownMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>

<P><STRONG><a name="[3b6]"></a>LPS25HB_Set_SpiInterface</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lps25hb_driver.o(i.LPS25HB_Set_SpiInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_Set_SpiInterface &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[3b9]"></a>LPS25HB_WriteReg</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lps25hb_driver.o(i.LPS25HB_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Write_Reg
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Write_Reg
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
</UL>

<P><STRONG><a name="[3ba]"></a>LPS25HB_assert_failed</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lps25hb_driver.o(i.LPS25HB_assert_failed), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[3bb]"></a>LSM303AGR_ACC_Get_Acceleration</STRONG> (Thumb, 344 bytes, Stack size 48 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes
</UL>

<P><STRONG><a name="[3bd]"></a>LSM303AGR_ACC_Get_Raw_Acceleration</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_Get_Raw_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_Get_Raw_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_AxesRaw
</UL>

<P><STRONG><a name="[3be]"></a>LSM303AGR_ACC_R_FullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_FS
</UL>

<P><STRONG><a name="[3bf]"></a>LSM303AGR_ACC_R_HiRes</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_HiRes))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_HiRes &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_AxesRaw
</UL>

<P><STRONG><a name="[3c0]"></a>LSM303AGR_ACC_R_LOWPWR_EN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_LOWPWR_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_LOWPWR_EN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Sensitivity
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_AxesRaw
</UL>

<P><STRONG><a name="[3c1]"></a>LSM303AGR_ACC_R_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
</UL>

<P><STRONG><a name="[3c2]"></a>LSM303AGR_ACC_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_WhoAmI
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Check_WhoAmI
</UL>

<P><STRONG><a name="[3c3]"></a>LSM303AGR_ACC_R_XDataAvail</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XDataAvail))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[3c4]"></a>LSM303AGR_ACC_R_XEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_XEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[3c5]"></a>LSM303AGR_ACC_R_YEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_YEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[3c6]"></a>LSM303AGR_ACC_R_ZEN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_R_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[3bc]"></a>LSM303AGR_ACC_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Read_Reg
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
<LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>

<P><STRONG><a name="[3c7]"></a>LSM303AGR_ACC_W_BlockDataUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_W_BlockDataUpdate &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[3c9]"></a>LSM303AGR_ACC_W_FifoMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FifoMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_W_FifoMode &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[3ca]"></a>LSM303AGR_ACC_W_FullScale</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_FullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS_Value
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_FS
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[3cb]"></a>LSM303AGR_ACC_W_ODR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>

<P><STRONG><a name="[3cc]"></a>LSM303AGR_ACC_W_XEN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_XEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_W_XEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[3cd]"></a>LSM303AGR_ACC_W_YEN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_YEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_W_YEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[3ce]"></a>LSM303AGR_ACC_W_ZEN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_W_ZEN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_Axes_Status
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Init
</UL>

<P><STRONG><a name="[3c8]"></a>LSM303AGR_ACC_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_acc_driver.o(i.LSM303AGR_ACC_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Write_Reg
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
</UL>

<P><STRONG><a name="[3cf]"></a>LSM303AGR_MAG_Get_Raw_Magnetic</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_Get_Raw_Magnetic))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_AxesRaw
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_Axes
</UL>

<P><STRONG><a name="[3d1]"></a>LSM303AGR_MAG_R_ODR</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_MAG_R_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_ODR
</UL>

<P><STRONG><a name="[3d2]"></a>LSM303AGR_MAG_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_WhoAmI
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_DeInit
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Check_WhoAmI
</UL>

<P><STRONG><a name="[3d3]"></a>LSM303AGR_MAG_R_ZYXDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_R_ZYXDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_MAG_R_ZYXDA &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Get_DRDY_Status
</UL>

<P><STRONG><a name="[3d0]"></a>LSM303AGR_MAG_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Read_Reg
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ZYXDA
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ODR
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Get_Raw_Magnetic
</UL>

<P><STRONG><a name="[3d4]"></a>LSM303AGR_MAG_W_BDU</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_W_BDU &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[3d6]"></a>LSM303AGR_MAG_W_MD</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_MD))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Enable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Sensor_Disable
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_DeInit
</UL>

<P><STRONG><a name="[3d7]"></a>LSM303AGR_MAG_W_ODR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR_Value
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Set_ODR
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[3d8]"></a>LSM303AGR_MAG_W_ST</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_W_ST))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_MAG_W_ST &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Init
</UL>

<P><STRONG><a name="[3d5]"></a>LSM303AGR_MAG_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_mag_driver.o(i.LSM303AGR_MAG_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM303AGR_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_M_Write_Reg
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
</UL>

<P><STRONG><a name="[3da]"></a>LSM6DS0_ACC_GYRO_Get_Acceleration</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_Get_Acceleration))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_AxesRaw
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes
</UL>

<P><STRONG><a name="[3dc]"></a>LSM6DS0_ACC_GYRO_Get_AngularRate</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_Get_AngularRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_AxesRaw
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes
</UL>

<P><STRONG><a name="[3dd]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[3de]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisY</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[3df]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[3e0]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerDataRate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_ODR
</UL>

<P><STRONG><a name="[3e1]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[3e2]"></a>LSM6DS0_ACC_GYRO_R_AccelerometerFullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_AccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Sensitivity
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_FS
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_Axes
</UL>

<P><STRONG><a name="[3e3]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisX</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[3e4]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisY</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[3e5]"></a>LSM6DS0_ACC_GYRO_R_GyroAxisZ</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[3e6]"></a>LSM6DS0_ACC_GYRO_R_GyroDataRate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
</UL>

<P><STRONG><a name="[3e7]"></a>LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[3e8]"></a>LSM6DS0_ACC_GYRO_R_GyroFullScale</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_GyroFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Sensitivity
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_FS
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_Axes
</UL>

<P><STRONG><a name="[3e9]"></a>LSM6DS0_ACC_GYRO_R_WHO_AM_I_</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_R_WHO_AM_I_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_WhoAmI
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_WhoAmI
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>

<P><STRONG><a name="[3db]"></a>LSM6DS0_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataRate
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisZ
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisY
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisX
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataRate
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisY
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisX
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_AngularRate
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_Acceleration
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Read_Reg
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Read_Reg
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
</UL>

<P><STRONG><a name="[3ea]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisX</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[3ec]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[3ed]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_Axes_Status
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[3ee]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerDataRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR_Value
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_ODR
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Enable
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_DeInit
</UL>

<P><STRONG><a name="[3ef]"></a>LSM6DS0_ACC_GYRO_W_AccelerometerFullScale</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS_Value
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Set_FS
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
</UL>

<P><STRONG><a name="[3f0]"></a>LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[3f1]"></a>LSM6DS0_ACC_GYRO_W_BlockDataUpdate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_BlockDataUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_BlockDataUpdate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[3f2]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisX</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisX))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisX &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[3f3]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisY</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisY))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisY &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[3f4]"></a>LSM6DS0_ACC_GYRO_W_GyroAxisZ</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroAxisZ))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_Axes_Status
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[3f5]"></a>LSM6DS0_ACC_GYRO_W_GyroDataRate</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_DeInit
</UL>

<P><STRONG><a name="[3f6]"></a>LSM6DS0_ACC_GYRO_W_GyroFullScale</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_W_GyroFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS_Value
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_FS
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[3eb]"></a>LSM6DS0_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver.o(i.LSM6DS0_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Write_Reg
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Write_Reg
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
</UL>

<P><STRONG><a name="[2e9]"></a>LSM6DS0_Sensor_IO_ITConfig</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, x_nucleo_iks01a1.o(i.LSM6DS0_Sensor_IO_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
</UL>

<P><STRONG><a name="[3fa]"></a>LSM6DS3_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_AxesRaw
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes
</UL>

<P><STRONG><a name="[3fc]"></a>LSM6DS3_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_AxesRaw
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes
</UL>

<P><STRONG><a name="[3fd]"></a>LSM6DS3_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Get_Axis
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Data
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Get_Axis
</UL>

<P><STRONG><a name="[3fe]"></a>LSM6DS3_ACC_GYRO_Get_GetStepCounter</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_Get_GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Step_Count
</UL>

<P><STRONG><a name="[3ff]"></a>LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_Status
</UL>

<P><STRONG><a name="[400]"></a>LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Double_Tap_Detection_Status
</UL>

<P><STRONG><a name="[401]"></a>LSM6DS3_ACC_GYRO_R_DSD_XH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_XH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_XH
</UL>

<P><STRONG><a name="[402]"></a>LSM6DS3_ACC_GYRO_R_DSD_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_XL
</UL>

<P><STRONG><a name="[403]"></a>LSM6DS3_ACC_GYRO_R_DSD_YH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_YH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_YH
</UL>

<P><STRONG><a name="[404]"></a>LSM6DS3_ACC_GYRO_R_DSD_YL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_YL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_YL
</UL>

<P><STRONG><a name="[405]"></a>LSM6DS3_ACC_GYRO_R_DSD_ZH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_ZH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_ZH
</UL>

<P><STRONG><a name="[406]"></a>LSM6DS3_ACC_GYRO_R_DSD_ZL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_DSD_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_DSD_ZL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_6D_Orientation_ZL
</UL>

<P><STRONG><a name="[407]"></a>LSM6DS3_ACC_GYRO_R_FF_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FF_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Free_Fall_Detection_Status
</UL>

<P><STRONG><a name="[408]"></a>LSM6DS3_ACC_GYRO_R_FIFOEmpty</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[409]"></a>LSM6DS3_ACC_GYRO_R_FIFOFull</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOFull &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Full_Status
</UL>

<P><STRONG><a name="[40a]"></a>LSM6DS3_ACC_GYRO_R_FIFONumOfEntries</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFONumOfEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Num_Of_Samples
</UL>

<P><STRONG><a name="[40b]"></a>LSM6DS3_ACC_GYRO_R_FIFOPattern</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FIFOPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FIFOPattern &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Pattern
</UL>

<P><STRONG><a name="[40c]"></a>LSM6DS3_ACC_GYRO_R_FS_125</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_125 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_FS
</UL>

<P><STRONG><a name="[40d]"></a>LSM6DS3_ACC_GYRO_R_FS_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_FS
</UL>

<P><STRONG><a name="[40e]"></a>LSM6DS3_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_FS
</UL>

<P><STRONG><a name="[40f]"></a>LSM6DS3_ACC_GYRO_R_GDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_GDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[410]"></a>LSM6DS3_ACC_GYRO_R_ODR_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
</UL>

<P><STRONG><a name="[411]"></a>LSM6DS3_ACC_GYRO_R_ODR_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
</UL>

<P><STRONG><a name="[412]"></a>LSM6DS3_ACC_GYRO_R_OVERRUN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_OVERRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_OVERRUN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Get_Overrun_Status
</UL>

<P><STRONG><a name="[413]"></a>LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Pedometer_Status
</UL>

<P><STRONG><a name="[414]"></a>LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Single_Tap_Detection_Status
</UL>

<P><STRONG><a name="[415]"></a>LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Tilt_Detection_Status
</UL>

<P><STRONG><a name="[416]"></a>LSM6DS3_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_WhoAmI
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_WhoAmI
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>

<P><STRONG><a name="[417]"></a>LSM6DS3_ACC_GYRO_R_WU_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_WU_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Wake_Up_Detection_Status
</UL>

<P><STRONG><a name="[418]"></a>LSM6DS3_ACC_GYRO_R_XEN_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[419]"></a>LSM6DS3_ACC_GYRO_R_XEN_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[41a]"></a>LSM6DS3_ACC_GYRO_R_XLDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_XLDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[41b]"></a>LSM6DS3_ACC_GYRO_R_YEN_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_YEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_YEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[41c]"></a>LSM6DS3_ACC_GYRO_R_YEN_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_YEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_YEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[41d]"></a>LSM6DS3_ACC_GYRO_R_ZEN_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ZEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes_Status
</UL>

<P><STRONG><a name="[41e]"></a>LSM6DS3_ACC_GYRO_R_ZEN_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_R_ZEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_ACC_GYRO_R_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes_Status
</UL>

<P><STRONG><a name="[3fb]"></a>LSM6DS3_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Read_Reg
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Read_Reg
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_XL
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_G
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_XL
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_G
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XLDA
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_XL
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_G
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WU_EV_STATUS
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_OVERRUN
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_XL
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_G
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_GDA
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOPattern
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFONumOfEntries
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOFull
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOEmpty
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FF_EV_STATUS
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZL
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZH
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YL
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YH
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XL
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XH
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetStepCounter
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawGyroData
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawAccData
</UL>

<P><STRONG><a name="[41f]"></a>LSM6DS3_ACC_GYRO_W_6DEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_6DEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_6DEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[421]"></a>LSM6DS3_ACC_GYRO_W_6DEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_6DEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_6DEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[422]"></a>LSM6DS3_ACC_GYRO_W_BDU</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_BDU &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[423]"></a>LSM6DS3_ACC_GYRO_W_DEC_FIFO_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DEC_FIFO_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Set_Decimation
</UL>

<P><STRONG><a name="[424]"></a>LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Set_Decimation
</UL>

<P><STRONG><a name="[425]"></a>LSM6DS3_ACC_GYRO_W_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Duration_Time
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[426]"></a>LSM6DS3_ACC_GYRO_W_EmbeddedAccess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_EmbeddedAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[427]"></a>LSM6DS3_ACC_GYRO_W_FFEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FFEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FFEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[428]"></a>LSM6DS3_ACC_GYRO_W_FFEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FFEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FFEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[429]"></a>LSM6DS3_ACC_GYRO_W_FF_Duration</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FF_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FF_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[42a]"></a>LSM6DS3_ACC_GYRO_W_FF_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FF_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FF_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Free_Fall_Threshold
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Free_Fall_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[42b]"></a>LSM6DS3_ACC_GYRO_W_FIFO_MODE</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[42c]"></a>LSM6DS3_ACC_GYRO_W_FIFO_Watermark</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FIFO_Watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[42d]"></a>LSM6DS3_ACC_GYRO_W_FSS5_on_INT1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FSS5_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FSS5_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_INT1_FIFO_Full
</UL>

<P><STRONG><a name="[42e]"></a>LSM6DS3_ACC_GYRO_W_FS_125</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_125 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS_Value
</UL>

<P><STRONG><a name="[42f]"></a>LSM6DS3_ACC_GYRO_W_FS_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS_Value
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_FS
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[430]"></a>LSM6DS3_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS_Value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_FS
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
</UL>

<P><STRONG><a name="[431]"></a>LSM6DS3_ACC_GYRO_W_FUNC_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_FUNC_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_FUNC_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[432]"></a>LSM6DS3_ACC_GYRO_W_IF_Addr_Incr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_IF_Addr_Incr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_IF_Addr_Incr &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[433]"></a>LSM6DS3_ACC_GYRO_W_LIR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_LIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Interrupt_Latch
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[434]"></a>LSM6DS3_ACC_GYRO_W_ODR_FIFO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_ODR_Value
</UL>

<P><STRONG><a name="[435]"></a>LSM6DS3_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_DeInit
</UL>

<P><STRONG><a name="[436]"></a>LSM6DS3_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[437]"></a>LSM6DS3_ACC_GYRO_W_PEDO_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PEDO_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PEDO_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[438]"></a>LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[439]"></a>LSM6DS3_ACC_GYRO_W_PedoStepReset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PedoStepReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Step_Counter_Reset
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Step_Counter_Reset
</UL>

<P><STRONG><a name="[43a]"></a>LSM6DS3_ACC_GYRO_W_PedoThreshold</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_PedoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Pedometer_Threshold
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Pedometer
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[43b]"></a>LSM6DS3_ACC_GYRO_W_QUIET_Duration</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_QUIET_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Quiet_Time
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[43c]"></a>LSM6DS3_ACC_GYRO_W_SHOCK_Duration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SHOCK_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Shock_Time
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[43d]"></a>LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[43e]"></a>LSM6DS3_ACC_GYRO_W_SIXD_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SIXD_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SIXD_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_6D_Orientation
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[43f]"></a>LSM6DS3_ACC_GYRO_W_SLEEP_DUR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SLEEP_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SLEEP_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[440]"></a>LSM6DS3_ACC_GYRO_W_STOP_ON_FTH</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_STOP_ON_FTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_Set_Stop_On_Fth
</UL>

<P><STRONG><a name="[441]"></a>LSM6DS3_ACC_GYRO_W_SelfTest_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SelfTest_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SelfTest_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_SelfTest
</UL>

<P><STRONG><a name="[442]"></a>LSM6DS3_ACC_GYRO_W_SelfTest_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SelfTest_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_SelfTest
</UL>

<P><STRONG><a name="[443]"></a>LSM6DS3_ACC_GYRO_W_SingleTapOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SingleTapOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SingleTapOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[444]"></a>LSM6DS3_ACC_GYRO_W_SingleTapOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_SingleTapOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_SingleTapOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[445]"></a>LSM6DS3_ACC_GYRO_W_TAP_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Tap_Threshold
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[446]"></a>LSM6DS3_ACC_GYRO_W_TAP_X_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_X_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_X_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[447]"></a>LSM6DS3_ACC_GYRO_W_TAP_Y_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_Y_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_Y_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[448]"></a>LSM6DS3_ACC_GYRO_W_TAP_Z_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TAP_Z_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[449]"></a>LSM6DS3_ACC_GYRO_W_TILT_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TILT_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TILT_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[44a]"></a>LSM6DS3_ACC_GYRO_W_TIMER_HR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TIMER_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TIMER_HR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[44b]"></a>LSM6DS3_ACC_GYRO_W_TapEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TapEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TapEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[44c]"></a>LSM6DS3_ACC_GYRO_W_TapEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TapEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TapEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[44d]"></a>LSM6DS3_ACC_GYRO_W_TiltEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TiltEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[44e]"></a>LSM6DS3_ACC_GYRO_W_TiltEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_TiltEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_TiltEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Tilt_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[44f]"></a>LSM6DS3_ACC_GYRO_W_WAKE_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WAKE_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WAKE_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[450]"></a>LSM6DS3_ACC_GYRO_W_WK_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WK_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WK_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Wake_Up_Threshold
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[451]"></a>LSM6DS3_ACC_GYRO_W_WUEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WUEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[452]"></a>LSM6DS3_ACC_GYRO_W_WUEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_WUEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_WUEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Wake_Up_Detection
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>

<P><STRONG><a name="[453]"></a>LSM6DS3_ACC_GYRO_W_XEN_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_XEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_XEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[454]"></a>LSM6DS3_ACC_GYRO_W_XEN_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_XEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_XEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>

<P><STRONG><a name="[455]"></a>LSM6DS3_ACC_GYRO_W_YEN_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_YEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_YEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[456]"></a>LSM6DS3_ACC_GYRO_W_YEN_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_YEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_YEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>

<P><STRONG><a name="[457]"></a>LSM6DS3_ACC_GYRO_W_ZEN_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ZEN_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_Axes_Status
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
</UL>

<P><STRONG><a name="[458]"></a>LSM6DS3_ACC_GYRO_W_ZEN_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_W_ZEN_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_Axes_Status
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
</UL>

<P><STRONG><a name="[420]"></a>LSM6DS3_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver.o(i.LSM6DS3_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Write_Reg
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Write_Reg
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
</UL>

<P><STRONG><a name="[2ea]"></a>LSM6DS3_Sensor_IO_ITConfig</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, x_nucleo_iks01a1.o(i.LSM6DS3_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM6DS3_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
</UL>

<P><STRONG><a name="[45c]"></a>LSM6DSL_ACC_GYRO_GetRawAccData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawAccData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_AxesRaw
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
</UL>

<P><STRONG><a name="[45e]"></a>LSM6DSL_ACC_GYRO_GetRawGyroData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_GetRawGyroData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_AxesRaw
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
</UL>

<P><STRONG><a name="[45f]"></a>LSM6DSL_ACC_GYRO_Get_GetFIFOData</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetFIFOData))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Data
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>

<P><STRONG><a name="[460]"></a>LSM6DSL_ACC_GYRO_Get_GetStepCounter</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_Get_GetStepCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Step_Count
</UL>

<P><STRONG><a name="[461]"></a>LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_Status
</UL>

<P><STRONG><a name="[462]"></a>LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Double_Tap_Detection_Status
</UL>

<P><STRONG><a name="[463]"></a>LSM6DSL_ACC_GYRO_R_DSD_XH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XH
</UL>

<P><STRONG><a name="[464]"></a>LSM6DSL_ACC_GYRO_R_DSD_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_XL
</UL>

<P><STRONG><a name="[465]"></a>LSM6DSL_ACC_GYRO_R_DSD_YH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YH
</UL>

<P><STRONG><a name="[466]"></a>LSM6DSL_ACC_GYRO_R_DSD_YL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_YL
</UL>

<P><STRONG><a name="[467]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZH</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZH
</UL>

<P><STRONG><a name="[468]"></a>LSM6DSL_ACC_GYRO_R_DSD_ZL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_DSD_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_6D_Orientation_ZL
</UL>

<P><STRONG><a name="[469]"></a>LSM6DSL_ACC_GYRO_R_FF_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FF_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Free_Fall_Detection_Status
</UL>

<P><STRONG><a name="[46a]"></a>LSM6DSL_ACC_GYRO_R_FIFOEmpty</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Empty_Status
</UL>

<P><STRONG><a name="[46b]"></a>LSM6DSL_ACC_GYRO_R_FIFOFull</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOFull))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Full_Status
</UL>

<P><STRONG><a name="[46c]"></a>LSM6DSL_ACC_GYRO_R_FIFONumOfEntries</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFONumOfEntries))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Num_Of_Samples
</UL>

<P><STRONG><a name="[46d]"></a>LSM6DSL_ACC_GYRO_R_FIFOPattern</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FIFOPattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Pattern
</UL>

<P><STRONG><a name="[46e]"></a>LSM6DSL_ACC_GYRO_R_FS_125</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_125 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[46f]"></a>LSM6DSL_ACC_GYRO_R_FS_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_FS
</UL>

<P><STRONG><a name="[470]"></a>LSM6DSL_ACC_GYRO_R_FS_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_FS
</UL>

<P><STRONG><a name="[471]"></a>LSM6DSL_ACC_GYRO_R_GDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_GDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_DRDY_Status
</UL>

<P><STRONG><a name="[472]"></a>LSM6DSL_ACC_GYRO_R_ODR_G</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
</UL>

<P><STRONG><a name="[473]"></a>LSM6DSL_ACC_GYRO_R_ODR_XL</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
</UL>

<P><STRONG><a name="[474]"></a>LSM6DSL_ACC_GYRO_R_OVERRUN</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_OVERRUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Get_Overrun_Status
</UL>

<P><STRONG><a name="[475]"></a>LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Pedometer_Status
</UL>

<P><STRONG><a name="[476]"></a>LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Single_Tap_Detection_Status
</UL>

<P><STRONG><a name="[477]"></a>LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Tilt_Detection_Status
</UL>

<P><STRONG><a name="[478]"></a>LSM6DSL_ACC_GYRO_R_WHO_AM_I</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WHO_AM_I))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_WhoAmI
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_WhoAmI
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>

<P><STRONG><a name="[479]"></a>LSM6DSL_ACC_GYRO_R_WU_EV_STATUS</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_WU_EV_STATUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Wake_Up_Detection_Status
</UL>

<P><STRONG><a name="[47a]"></a>LSM6DSL_ACC_GYRO_R_XLDA</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_R_XLDA))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_DRDY_Status
</UL>

<P><STRONG><a name="[45d]"></a>LSM6DSL_ACC_GYRO_ReadReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_ReadReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Read_Reg
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Read_Reg
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
</UL>

<P><STRONG><a name="[47b]"></a>LSM6DSL_ACC_GYRO_W_6DEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_6DEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_6DEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[47d]"></a>LSM6DSL_ACC_GYRO_W_6DEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_6DEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_6DEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[47e]"></a>LSM6DSL_ACC_GYRO_W_BASIC_INT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BASIC_INT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BASIC_INT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[47f]"></a>LSM6DSL_ACC_GYRO_W_BDU</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_BDU))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_BDU &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[480]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Set_Decimation
</UL>

<P><STRONG><a name="[481]"></a>LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Set_Decimation
</UL>

<P><STRONG><a name="[482]"></a>LSM6DSL_ACC_GYRO_W_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Duration_Time
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[483]"></a>LSM6DSL_ACC_GYRO_W_EmbeddedAccess</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_EmbeddedAccess))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[484]"></a>LSM6DSL_ACC_GYRO_W_FFEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FFEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FFEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[485]"></a>LSM6DSL_ACC_GYRO_W_FFEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FFEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FFEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[486]"></a>LSM6DSL_ACC_GYRO_W_FF_Duration</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[487]"></a>LSM6DSL_ACC_GYRO_W_FF_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FF_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Free_Fall_Threshold
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Free_Fall_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[488]"></a>LSM6DSL_ACC_GYRO_W_FIFO_MODE</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_MODE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Mode
</UL>

<P><STRONG><a name="[489]"></a>LSM6DSL_ACC_GYRO_W_FIFO_Watermark</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FIFO_Watermark))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Watermark_Level
</UL>

<P><STRONG><a name="[48a]"></a>LSM6DSL_ACC_GYRO_W_FS_125</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_125))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_125 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
</UL>

<P><STRONG><a name="[48b]"></a>LSM6DSL_ACC_GYRO_W_FS_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS_Value
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_FS
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[48c]"></a>LSM6DSL_ACC_GYRO_W_FS_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FS_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS_Value
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_FS
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>

<P><STRONG><a name="[48d]"></a>LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_INT1_FIFO_Full
</UL>

<P><STRONG><a name="[48e]"></a>LSM6DSL_ACC_GYRO_W_FUNC_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_FUNC_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_FUNC_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[48f]"></a>LSM6DSL_ACC_GYRO_W_IF_Addr_Incr</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_IF_Addr_Incr))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_IF_Addr_Incr &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
</UL>

<P><STRONG><a name="[490]"></a>LSM6DSL_ACC_GYRO_W_LIR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_LIR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Interrupt_Latch
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_Interrupt_Latch
</UL>

<P><STRONG><a name="[491]"></a>LSM6DSL_ACC_GYRO_W_ODR_FIFO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_FIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_ODR_Value
</UL>

<P><STRONG><a name="[492]"></a>LSM6DSL_ACC_GYRO_W_ODR_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
</UL>

<P><STRONG><a name="[493]"></a>LSM6DSL_ACC_GYRO_W_ODR_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_ODR_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[494]"></a>LSM6DSL_ACC_GYRO_W_PEDO</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PEDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PEDO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[495]"></a>LSM6DSL_ACC_GYRO_W_PedoStepReset</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoStepReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Step_Counter_Reset
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Step_Counter_Reset
</UL>

<P><STRONG><a name="[496]"></a>LSM6DSL_ACC_GYRO_W_PedoThreshold</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_PedoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Read
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Pedometer_Threshold
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[497]"></a>LSM6DSL_ACC_GYRO_W_QUIET_Duration</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_QUIET_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Quiet_Time
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[498]"></a>LSM6DSL_ACC_GYRO_W_SHOCK_Duration</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SHOCK_Duration))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Shock_Time
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[499]"></a>LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[49a]"></a>LSM6DSL_ACC_GYRO_W_SIXD_THS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SIXD_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SIXD_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_6D_Orientation
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[49b]"></a>LSM6DSL_ACC_GYRO_W_SLEEP_DUR</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SLEEP_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SLEEP_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[49c]"></a>LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Pedometer
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[49d]"></a>LSM6DSL_ACC_GYRO_W_STOP_ON_FTH</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_STOP_ON_FTH))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_Set_Stop_On_Fth
</UL>

<P><STRONG><a name="[49e]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_G</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_G))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_SelfTest
</UL>

<P><STRONG><a name="[49f]"></a>LSM6DSL_ACC_GYRO_W_SelfTest_XL</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SelfTest_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_SelfTest
</UL>

<P><STRONG><a name="[4a0]"></a>LSM6DSL_ACC_GYRO_W_SingleTapOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SingleTapOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SingleTapOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[4a1]"></a>LSM6DSL_ACC_GYRO_W_SingleTapOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_SingleTapOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_SingleTapOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
</UL>

<P><STRONG><a name="[4a2]"></a>LSM6DSL_ACC_GYRO_W_TAP_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Tap_Threshold
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[4a3]"></a>LSM6DSL_ACC_GYRO_W_TAP_X_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_X_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_X_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[4a4]"></a>LSM6DSL_ACC_GYRO_W_TAP_Y_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Y_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Y_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[4a5]"></a>LSM6DSL_ACC_GYRO_W_TAP_Z_EN</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TAP_Z_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[4a6]"></a>LSM6DSL_ACC_GYRO_W_TILT</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TILT))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TILT &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[4a7]"></a>LSM6DSL_ACC_GYRO_W_TIMER_HR</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TIMER_HR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TIMER_HR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
</UL>

<P><STRONG><a name="[4a8]"></a>LSM6DSL_ACC_GYRO_W_TapEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TapEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TapEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[4a9]"></a>LSM6DSL_ACC_GYRO_W_TapEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TapEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TapEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
</UL>

<P><STRONG><a name="[4aa]"></a>LSM6DSL_ACC_GYRO_W_TiltEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TiltEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TiltEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[4ab]"></a>LSM6DSL_ACC_GYRO_W_TiltEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_TiltEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_TiltEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Tilt_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[4ac]"></a>LSM6DSL_ACC_GYRO_W_WAKE_DUR</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WAKE_DUR))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WAKE_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[4ad]"></a>LSM6DSL_ACC_GYRO_W_WK_THS</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WK_THS))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_Wake_Up_Threshold
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[4ae]"></a>LSM6DSL_ACC_GYRO_W_WUEvOnInt1</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WUEvOnInt1))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WUEvOnInt1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[4af]"></a>LSM6DSL_ACC_GYRO_W_WUEvOnInt2</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_W_WUEvOnInt2))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_ACC_GYRO_W_WUEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Wake_Up_Detection
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>

<P><STRONG><a name="[47c]"></a>LSM6DSL_ACC_GYRO_WriteReg</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver.o(i.LSM6DSL_ACC_GYRO_WriteReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Write_Reg
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Write_Reg
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_EmbeddedAccess
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>

<P><STRONG><a name="[2eb]"></a>LSM6DSL_Sensor_IO_ITConfig</STRONG> (Thumb, 126 bytes, Stack size 72 bytes, x_nucleo_iks01a2.o(i.LSM6DSL_Sensor_IO_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
</UL>

<P><STRONG><a name="[308]"></a>LedOffTargetPlatform</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, targetplatform.o(i.LedOffTargetPlatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedOffTargetPlatform
</UL>
<BR>[Calls]<UL><LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[307]"></a>LedOnTargetPlatform</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, targetplatform.o(i.LedOnTargetPlatform))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedOnTargetPlatform
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b3]"></a>MDM_ReCallGMD</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, metadatamanager.o(i.MDM_ReCallGMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MDM_ReCallGMD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCallCalibrationFromMemory
</UL>

<P><STRONG><a name="[4b5]"></a>MDM_SaveGMD</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, metadatamanager.o(i.MDM_SaveGMD))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MDM_SaveGMD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCalibrationInMemory
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibrationToMemory
</UL>

<P><STRONG><a name="[180]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4b6]"></a>MotionAR_manager_init</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, motionar_manager.o(i.MotionAR_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MotionAR_manager_init &rArr; MotionAR_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_SetOrientation_Acc
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_Initialize
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_GetLibVersion
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b8]"></a>MotionAR_manager_run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motionar_manager.o(i.MotionAR_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = MotionAR_manager_run &rArr; MotionAR_Update &rArr; ActivityRecognizerFunction &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b9]"></a>MotionCP_manager_init</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, motioncp_manager.o(i.MotionCP_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MotionCP_manager_init &rArr; MotionCP_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_SetOrientation_Acc
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_Initialize
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_GetLibVersion
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4bb]"></a>MotionCP_manager_run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motioncp_manager.o(i.MotionCP_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = MotionCP_manager_run &rArr; MotionCP_Update &rArr; CarryPositionRecognizerFunction &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[275]"></a>MotionFX_LoadMagCalFromNVM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_LoadMagCalFromNVM))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MotionFX_LoadMagCalFromNVM &rArr; ReCallCalibrationFromMemory &rArr; MDM_ReCallGMD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReCallCalibrationFromMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>

<P><STRONG><a name="[276]"></a>MotionFX_SaveMagCalInNVM</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_SaveMagCalInNVM))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = MotionFX_SaveMagCalInNVM &rArr; SaveCalibrationToMemory &rArr; Term_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibrationToMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>

<P><STRONG><a name="[4be]"></a>MotionFX_manager_MagCal_run</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, motionfx_manager.o(i.MotionFX_manager_MagCal_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 2096<LI>Call Chain = MotionFX_manager_MagCal_run &rArr; MotionFX_MagCal_run &rArr; MEMS_runMagCal &rArr; MEMS_runCalibration &rArr; MEMS_solveEllipsoid &rArr; computeEllipsoidHICoeff &rArr; getMagStats &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_run
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_getParams
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c0]"></a>MotionFX_manager_MagCal_start</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_manager_MagCal_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = MotionFX_manager_MagCal_start &rArr; MotionFX_MagCal_init &rArr; MotionFX_SaveMagCalInNVM &rArr; SaveCalibrationToMemory &rArr; Term_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c1]"></a>MotionFX_manager_MagCal_stop</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_manager_MagCal_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 856<LI>Call Chain = MotionFX_manager_MagCal_stop &rArr; MotionFX_MagCal_init &rArr; MotionFX_SaveMagCalInNVM &rArr; SaveCalibrationToMemory &rArr; Term_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[504]"></a>MotionFX_manager_getDataOUT</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_manager_getDataOUT))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c2]"></a>MotionFX_manager_init</STRONG> (Thumb, 200 bytes, Stack size 56 bytes, motionfx_manager.o(i.MotionFX_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MotionFX_manager_init &rArr; MotionFX_initialize &rArr; iNemoEngine_API_initialize &rArr; iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_setKnobs
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_initialize
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_getKnobs
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_9X
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_6X
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_GetLibVersion
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c4]"></a>MotionFX_manager_run</STRONG> (Thumb, 280 bytes, Stack size 48 bytes, motionfx_manager.o(i.MotionFX_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 3048<LI>Call Chain = MotionFX_manager_run &rArr; MotionFX_update &rArr; iNemoEngine_API_Update &rArr; iNemoEngine_9p6_Update &rArr; SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_update
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c5]"></a>MotionFX_manager_start_9X</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, motionfx_manager.o(i.MotionFX_manager_start_9X))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MotionFX_manager_start_9X &rArr; MotionFX_enable_9X &rArr; AsyncHeadway_initialize
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_9X
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c6]"></a>MotionGR_manager_init</STRONG> (Thumb, 76 bytes, Stack size 48 bytes, motiongr_manager.o(i.MotionGR_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = MotionGR_manager_init &rArr; MotionGR_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_SetOrientation_Acc
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_Initialize
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_GetLibVersion
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c8]"></a>MotionGR_manager_run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motiongr_manager.o(i.MotionGR_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = MotionGR_manager_run &rArr; MotionGR_Update &rArr; DetectAndroidLGestures &rArr; DetectPickUpGesture &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4c9]"></a>MotionID_manager_init</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, motionid_manager.o(i.MotionID_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MotionID_manager_init &rArr; MotionID_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_Initialize
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_GetLibVersion
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4cb]"></a>MotionID_manager_run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motionid_manager.o(i.MotionID_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MotionID_manager_run &rArr; MotionID_Update &rArr; __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4cc]"></a>MotionPM_manager_init</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, motionpm_manager.o(i.MotionPM_manager_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MotionPM_manager_init &rArr; MotionPM_GetLibVersion
</UL>
<BR>[Calls]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_Initialize
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_GetLibVersion
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ce]"></a>MotionPM_manager_run</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, motionpm_manager.o(i.MotionPM_manager_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 5416<LI>Call Chain = MotionPM_manager_run &rArr; MotionPM_Update &rArr; runStepDetection &rArr; FilterData &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_Update
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[17e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4cf]"></a>Osal_MemCpy</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[4d1]"></a>Osal_MemSet</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_request
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init_IDB05A1
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init_IDB04A1
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_version
</UL>

<P><STRONG><a name="[185]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4d2]"></a>Quat_Update</STRONG> (Thumb, 224 bytes, Stack size 32 bytes, sensor_service.o(i.Quat_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = Quat_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_aci_gatt_update_char_value
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4bc]"></a>ReCallCalibrationFromMemory</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, main.o(i.ReCallCalibrationFromMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ReCallCalibrationFromMemory &rArr; MDM_ReCallGMD &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_ReCallGMD
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_LoadMagCalFromNVM
</UL>

<P><STRONG><a name="[359]"></a>Read_Request_CB</STRONG> (Thumb, 738 bytes, Stack size 48 bytes, sensor_service.o(i.Read_Request_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = Read_Request_CB &rArr; Environmental_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepHWPedometer
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GestureRec_Update
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environmental_Update
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPosRec_Update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRec_Update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccPedo_Update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccEvent_Notify
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
</UL>

<P><STRONG><a name="[37a]"></a>ReseMetaDataManager</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, metadatamanager.o(i.ReseMetaDataManager))
<BR><BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
</UL>

<P><STRONG><a name="[2ff]"></a>ResetHWPedometer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hwadvancefeatures.o(i.ResetHWPedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ResetHWPedometer &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
</UL>

<P><STRONG><a name="[37e]"></a>SPI_Global_Init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, stm32f4xx_spi.o(i.SPI_Global_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SPI_Global_Init &rArr; HAL_SPI_Init &rArr; HAL_SPI_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
</UL>

<P><STRONG><a name="[183]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[4bd]"></a>SaveCalibrationToMemory</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, main.o(i.SaveCalibrationToMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = SaveCalibrationToMemory &rArr; Term_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_SaveGMD
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_SaveMagCalInNVM
</UL>

<P><STRONG><a name="[30c]"></a>SaveMetaDataManager</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, metadatamanager.o(i.SaveMetaDataManager))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SaveMetaDataManager &rArr; UserFunctionForSavingFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UserFunctionForSavingFlash
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2d4]"></a>Sensor_IO_Init_IKS01A1</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a1.o(i.Sensor_IO_Init_IKS01A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_PRESSURE_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LIS3MDL_MAGNETO_Init
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS25HB_TEMPERATURE_Init
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_GYRO_Init
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_GYRO_Init
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS3_ACCELERO_Init
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DS0_ACCELERO_Init
</UL>

<P><STRONG><a name="[2d6]"></a>Sensor_IO_Init_IKS01A2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Init_IKS01A2))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_GYRO_Init
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM6DSL_ACCELERO_Init
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_ACCELERO_Init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_TEMPERATURE_Init
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_TEMPERATURE_Init
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LPS22HB_PRESSURE_Init
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LSM303AGR_MAGNETO_Init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HTS221_HUMIDITY_Init
</UL>

<P><STRONG><a name="[36f]"></a>Sensor_IO_Read</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>

<P><STRONG><a name="[370]"></a>Sensor_IO_Write</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, x_nucleo_iks01a2.o(i.Sensor_IO_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Global_Error
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>

<P><STRONG><a name="[2c0]"></a>Set2GAccelerometerFullScale</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.Set2GAccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set2GAccelerometerFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[2bf]"></a>Set4GAccelerometerFullScale</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, main.o(i.Set4GAccelerometerFullScale))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Set4GAccelerometerFullScale
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[30b]"></a>StartUpdateFWBlueMS</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, ota.o(i.StartUpdateFWBlueMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StartUpdateFWBlueMS &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
</UL>

<P><STRONG><a name="[2ae]"></a>Stderr_Update</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, sensor_service.o(i.Stderr_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quat_Update
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntensityDet_Update
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GestureRec_Update
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environmental_Update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECompass_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPosRec_Update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRec_Update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccPedo_Update
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyroMag_Update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccEvent_Notify
</UL>

<P><STRONG><a name="[186]"></a>SysTick_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1c0]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(.text)
</UL>
<P><STRONG><a name="[19e]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM1_CC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM1_CC_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[1a1]"></a>TIM4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM4_IRQHandler &rArr; HAL_TIM_IRQHandler &rArr; HAL_TIM_OC_DelayElapsedCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[343]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 134 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[352]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_CCxChannelCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Stop_IT
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start_IT
</UL>

<P><STRONG><a name="[34e]"></a>TIM_OC2_SetConfig</STRONG> (Thumb, 94 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(i.TIM_OC2_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC2_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[2be]"></a>Term_Update</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, sensor_service.o(i.Term_Update))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = Term_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCalibrationInMemory
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibrationToMemory
</UL>

<P><STRONG><a name="[374]"></a>Timer_Expired</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gp_timer.o(i.Timer_Expired))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_Expired
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[373]"></a>Timer_Set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, gp_timer.o(i.Timer_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[37d]"></a>UART_Global_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f4xx_uart.o(i.UART_Global_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = UART_Global_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
</UL>

<P><STRONG><a name="[2c4]"></a>UpdateFWBlueMS</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, ota.o(i.UpdateFWBlueMS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UpdateFWBlueMS &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_GetState
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_DeInit
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Calculate
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[182]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f401xe.o(RESET)
</UL>
<P><STRONG><a name="[319]"></a>UserFunctionForErasingFlash</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, targetplatform.o(i.UserFunctionForErasingFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = UserFunctionForErasingFlash &rArr; HAL_FLASHEx_Erase &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASHEx_Erase
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMetaDataManager
</UL>

<P><STRONG><a name="[37b]"></a>UserFunctionForSavingFlash</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, targetplatform.o(i.UserFunctionForSavingFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = UserFunctionForSavingFlash &rArr; HAL_FLASH_Program &rArr; FLASH_WaitForLastOperation
</UL>
<BR>[Calls]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Unlock
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Program
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_FLASH_Lock
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
</UL>

<P><STRONG><a name="[4dd]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[522]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[2af]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCalibrationInMemory
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHWPedometer
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepHWPedometer
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHWOrientation6D
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWWakeUp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWTilt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWSingleTap
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWPedometer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWOrientation6D
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWWakeUp
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWTilt
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWSingleTap
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWPedometer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWOrientation6D
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFreeFall
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWDoubleTap
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Event_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quat_Update
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_manager_init
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_manager_init
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_manager_init
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_manager_init
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_manager_init
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_SaveGMD
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_ReCallGMD
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntensityDet_Update
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GestureRec_Update
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMetaDataManager
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environmental_Update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECompass_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPosRec_Update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRec_Update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccPedo_Update
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyroMag_Update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccEvent_Notify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibrationToMemory
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_assert_failed
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init_MEM1_Sensors
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_assert_failed
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_PowerDownMode
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
</UL>

<P><STRONG><a name="[4df]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[523]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[2ad]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCalibrationInMemory
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quat_Update
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntensityDet_Update
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GestureRec_Update
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environmental_Update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECompass_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPosRec_Update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRec_Update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccPedo_Update
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyroMag_Update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccEvent_Notify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveCalibrationToMemory
</UL>

<P><STRONG><a name="[23c]"></a>__ARM_common_memclr4_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, motion_ar.o(i.__ARM_common_memclr4_9))
<BR><BR>[Called By]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_SetOrientation_Acc
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_setOrientation
</UL>

<P><STRONG><a name="[256]"></a>__ARM_common_memset4_12</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, motion_fx.o(i.__ARM_common_memset4_12))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[4e6]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4ed]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>

<P><STRONG><a name="[29b]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[524]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[281]"></a>__hardfp_acosf</STRONG> (Thumb, 234 bytes, Stack size 16 bytes, acosf.o(i.__hardfp_acosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __hardfp_acosf &rArr; sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_solveEllipsoid
</UL>

<P><STRONG><a name="[262]"></a>__hardfp_asin</STRONG> (Thumb, 770 bytes, Stack size 88 bytes, asin.o(i.__hardfp_asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = __hardfp_asin &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
</UL>

<P><STRONG><a name="[236]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>

<P><STRONG><a name="[251]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[287]"></a>__hardfp_atanf</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, atanf.o(i.__hardfp_atanf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_atanf
</UL>
<BR>[Calls]<UL><LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
</UL>

<P><STRONG><a name="[282]"></a>__hardfp_cosf</STRONG> (Thumb, 280 bytes, Stack size 8 bytes, cosf.o(i.__hardfp_cosf))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __hardfp_cosf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_solveEllipsoid
</UL>

<P><STRONG><a name="[286]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
</UL>

<P><STRONG><a name="[259]"></a>__hardfp_floor</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, floor.o(i.__hardfp_floor))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[25b]"></a>__hardfp_fmax</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, fmax.o(i.__hardfp_fmax))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __hardfp_fmax &rArr; __ARM_dcmp4
</UL>
<BR>[Calls]<UL><LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_dcmp4
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[265]"></a>__hardfp_roundf</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, roundf.o(i.__hardfp_roundf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_frnd
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeEllipsoidHICoeff
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_solveEllipsoid
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runCalibration
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBufferIndex
</UL>

<P><STRONG><a name="[237]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>

<P><STRONG><a name="[234]"></a>__hardfp_sqrtf</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sqrtf.o(i.__hardfp_sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeEllipsoidHICoeff
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_solveEllipsoid
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagStats
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>

<P><STRONG><a name="[4f1]"></a>__hardfp_trunc</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, trunc.o(i.__hardfp_trunc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __hardfp_trunc &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drnd
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4e8]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4e4]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4eb]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[4e5]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4e7]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4e1]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>

<P><STRONG><a name="[4e3]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[4ee]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>

<P><STRONG><a name="[4ef]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[525]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[526]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[527]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[4e2]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrtf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>

<P><STRONG><a name="[4f4]"></a>aci_gap_init_IDB04A1</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, bluenrg_gap_aci.o(i.aci_gap_init_IDB04A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = aci_gap_init_IDB04A1 &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f6]"></a>aci_gap_init_IDB05A1</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, bluenrg_gap_aci.o(i.aci_gap_init_IDB05A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = aci_gap_init_IDB05A1 &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f7]"></a>aci_gap_set_auth_requirement</STRONG> (Thumb, 120 bytes, Stack size 88 bytes, bluenrg_gap_aci.o(i.aci_gap_set_auth_requirement))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = aci_gap_set_auth_requirement &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4f8]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 198 bytes, Stack size 120 bytes, bluenrg_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = aci_gap_set_discoverable &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConnectable
</UL>

<P><STRONG><a name="[4f9]"></a>aci_gap_update_adv_data</STRONG> (Thumb, 88 bytes, Stack size 80 bytes, bluenrg_gap_aci.o(i.aci_gap_update_adv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = aci_gap_update_adv_data &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConnectable
</UL>

<P><STRONG><a name="[2b6]"></a>aci_gatt_add_char</STRONG> (Thumb, 188 bytes, Stack size 112 bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = aci_gatt_add_char &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_SWServW2ST_Service
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HWServW2ST_Service
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_ConsoleW2ST_Service
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_ConfigW2ST_Service
</UL>

<P><STRONG><a name="[2b5]"></a>aci_gatt_add_serv</STRONG> (Thumb, 136 bytes, Stack size 72 bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_serv))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = aci_gatt_add_serv &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_SWServW2ST_Service
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HWServW2ST_Service
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_ConsoleW2ST_Service
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_ConfigW2ST_Service
</UL>

<P><STRONG><a name="[4d3]"></a>aci_gatt_allow_read</STRONG> (Thumb, 70 bytes, Stack size 40 bytes, bluenrg_gatt_aci.o(i.aci_gatt_allow_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = aci_gatt_allow_read &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
</UL>

<P><STRONG><a name="[4fa]"></a>aci_gatt_init</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, bluenrg_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = aci_gatt_init &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2ac]"></a>aci_gatt_update_char_value</STRONG> (Thumb, 130 bytes, Stack size 200 bytes, bluenrg_gatt_aci.o(i.aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;safe_aci_gatt_update_char_value
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Request_CB
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntensityDet_Update
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GestureRec_Update
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environmental_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPosRec_Update
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRec_Update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccPedo_Update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccEvent_Notify
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4fb]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 72 bytes, Stack size 40 bytes, bluenrg_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = aci_hal_set_tx_power_level &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[30d]"></a>aci_l2cap_connection_parameter_update_request</STRONG> (Thumb, 94 bytes, Stack size 48 bytes, bluenrg_l2cap_aci.o(i.aci_l2cap_connection_parameter_update_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = aci_l2cap_connection_parameter_update_request &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
</UL>

<P><STRONG><a name="[4ec]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[4e9]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[218]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, console.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[30e]"></a>getBlueNRGVersion</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, bluenrg_utils_small.o(i.getBlueNRGVersion))
<BR><BR>[Stack]<UL><LI>Max Depth = 1000<LI>Call Chain = getBlueNRGVersion &rArr; HCI_Process &rArr; HCI_Event_CB &rArr; Attribute_Modified_CB &rArr; DebugConsoleCommandParsing &rArr;  getBlueNRGVersion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_version
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4fc]"></a>hci_le_read_local_version</STRONG> (Thumb, 132 bytes, Stack size 64 bytes, hci_le.o(i.hci_le_read_local_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = hci_le_read_local_version &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBlueNRGVersion
</UL>

<P><STRONG><a name="[4fd]"></a>hci_le_set_random_address</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, hci_le.o(i.hci_le_set_random_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = hci_le_set_random_address &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4fe]"></a>hci_le_set_scan_resp_data</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, hci_le.o(i.hci_le_set_scan_resp_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = hci_le_set_scan_resp_data &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConnectable
</UL>

<P><STRONG><a name="[4f5]"></a>hci_send_req</STRONG> (Thumb, 506 bytes, Stack size 64 bytes, hci.o(i.hci_send_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 488<LI>Call Chain = hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Set
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Expired
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Write_Serial
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Enable_SPI_IRQ
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disable_SPI_IRQ
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_tail
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_remove_head
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_is_empty
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_tail
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert_head
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init_head
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_request
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_allow_read
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_serv
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init_IDB05A1
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init_IDB04A1
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_version
</UL>

<P><STRONG><a name="[4ff]"></a>list_get_size</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ble_list.o(i.list_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[35b]"></a>list_init_head</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ble_list.o(i.list_init_head))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[360]"></a>list_insert_head</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_list.o(i.list_insert_head))
<BR><BR>[Called By]<UL><LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[35c]"></a>list_insert_tail</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ble_list.o(i.list_insert_tail))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[35e]"></a>list_is_empty</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ble_list.o(i.list_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[35f]"></a>list_remove_head</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ble_list.o(i.list_remove_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = list_remove_head
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Isr
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[500]"></a>list_remove_tail</STRONG> (Thumb, 60 bytes, Stack size 4 bytes, ble_list.o(i.list_remove_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = list_remove_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_send_req
</UL>

<P><STRONG><a name="[1bf]"></a>main</STRONG> (Thumb, 4098 bytes, Stack size 96 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 5512<LI>Call Chain = main &rArr; MotionPM_manager_run &rArr; MotionPM_Update &rArr; runStepDetection &rArr; FilterData &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendEnvironmentalData
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetCalibrationInMemory
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitHWFeatures
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetStepHWPedometer
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetHWOrientation6D
<LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setConnectable
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_random_address
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBlueNRGVersion
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_auth_requirement
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init_IDB05A1
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init_IDB04A1
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quat_Update
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_manager_run
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_manager_init
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_manager_run
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionID_manager_init
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_manager_run
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_manager_init
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_start_9X
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_run
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_init
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_getDataOUT
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_stop
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_start
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_manager_MagCal_run
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_getParams
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_manager_run
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_manager_init
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_manager_run
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_manager_init
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnTargetPlatform
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffTargetPlatform
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntensityDet_Update
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMetaDataManager
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Process
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Init
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetHalVersion
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CRC_Init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GestureRec_Update
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EraseMetaDataManager
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECompass_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckBootLoaderCompliance
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPosRec_Update
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_RST
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_SWServW2ST_Service
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_HWServW2ST_Service
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_ConsoleW2ST_Service
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_ConfigW2ST_Service
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRec_Update
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccPedo_Update
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyroMag_Update
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccEvent_Notify
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_trunc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[2b1]"></a>safe_aci_gatt_update_char_value</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, sensor_service.o(i.safe_aci_gatt_update_char_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = safe_aci_gatt_update_char_value &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_update_char_value
</UL>
<BR>[Called By]<UL><LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Quat_Update
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ECompass_Update
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AccGyroMag_Update
</UL>

<P><STRONG><a name="[503]"></a>setConnectable</STRONG> (Thumb, 334 bytes, Stack size 80 bytes, sensor_service.o(i.setConnectable))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = setConnectable &rArr; aci_gap_set_discoverable &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_resp_data
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_update_adv_data
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4ea]"></a>sqrt</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
</UL>

<P><STRONG><a name="[4e0]"></a>sqrtf</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, sqrtf.o(i.sqrtf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4d4]"></a>ResetCalibrationInMemory</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, main.o(i.ResetCalibrationInMemory))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = ResetCalibrationInMemory &rArr; Term_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MDM_SaveGMD
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4d5]"></a>SendEnvironmentalData</STRONG> (Thumb, 886 bytes, Stack size 48 bytes, main.o(i.SendEnvironmentalData))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = SendEnvironmentalData &rArr; Environmental_Update &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnTargetPlatform
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffTargetPlatform
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Environmental_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c9]"></a>ConfigCommandParsing</STRONG> (Thumb, 1344 bytes, Stack size 40 bytes, sensor_service.o(i.ConfigCommandParsing))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = ConfigCommandParsing &rArr; Config_Notify &rArr; Stderr_Update &rArr; aci_gatt_update_char_value &rArr; hci_send_req &rArr; Hal_Write_Serial &rArr; BlueNRG_SPI_Write &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHWPedometer
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWWakeUp
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWTilt
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWSingleTap
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWPedometer
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWOrientation6D
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWFreeFall
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EnableHWDoubleTap
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWWakeUp
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWTilt
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWSingleTap
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWPedometer
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWOrientation6D
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWFreeFall
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableHWDoubleTap
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stderr_Update
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOnTargetPlatform
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedOffTargetPlatform
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LED_Update
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Config_Notify
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugConsoleCommandParsing
</UL>

<P><STRONG><a name="[2c7]"></a>DebugConsoleCommandParsing</STRONG> (Thumb, 892 bytes, Stack size 72 bytes, sensor_service.o(i.DebugConsoleCommandParsing))
<BR><BR>[Stack]<UL><LI>Max Depth = 864 + In Cycle
<LI>Call Chain = DebugConsoleCommandParsing &rArr;  getBlueNRGVersion (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetHWPedometer
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_parameter_update_request
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigCommandParsing
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartUpdateFWBlueMS
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getBlueNRGVersion
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Term_Update
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SaveMetaDataManager
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetHalVersion
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[37f]"></a>Init_MEM1_Sensors</STRONG> (Thumb, 570 bytes, Stack size 24 bytes, targetplatform.o(i.Init_MEM1_Sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Init_MEM1_Sensors &rArr; BSP_ACCELERO_Init_IKS01A2 &rArr; BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A2
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A1
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Get_WhoAmI_IKS01A1
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitTargetPlatform
</UL>

<P><STRONG><a name="[7]"></a>HTS221_H_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Check_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>HTS221_H_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_H_DeInit &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>HTS221_H_Get_DRDY_Status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_H_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>HTS221_H_Get_Hum</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_Hum))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HTS221_H_Get_Hum &rArr; HTS221_Get_Humidity &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Humidity
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>HTS221_H_Get_ODR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_H_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_H_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>HTS221_H_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_H_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>HTS221_H_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HTS221_H_Init &rArr; HTS221_Init &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>HTS221_H_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_H_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>HTS221_H_Sensor_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>HTS221_H_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>HTS221_H_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>HTS221_H_Set_ODR_Value</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_H_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>HTS221_H_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_H_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_H_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[36b]"></a>HTS221_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = HTS221_Init &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_BduMode
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Init
</UL>

<P><STRONG><a name="[36c]"></a>HTS221_Set_ODR</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_T_Set_ODR
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_H_Set_ODR
</UL>

<P><STRONG><a name="[14]"></a>HTS221_T_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Check_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>HTS221_T_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_T_DeInit &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1b]"></a>HTS221_T_Get_DRDY_Status</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_T_Get_DRDY_Status &rArr; HTS221_Get_DataStatus &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>HTS221_T_Get_ODR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = HTS221_T_Get_ODR &rArr; HTS221_Get_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15]"></a>HTS221_T_Get_Temp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, hts221_driver_hl.o(i.HTS221_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HTS221_T_Get_Temp &rArr; HTS221_Get_Temperature &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>HTS221_T_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = HTS221_T_Get_WhoAmI &rArr; HTS221_Get_DeviceID &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>HTS221_T_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = HTS221_T_Init &rArr; HTS221_Init &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>HTS221_T_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = HTS221_T_Read_Reg &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>HTS221_T_Sensor_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Sensor_Disable &rArr; HTS221_DeActivate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11]"></a>HTS221_T_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Sensor_Enable &rArr; HTS221_Activate &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17]"></a>HTS221_T_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Set_ODR &rArr; HTS221_Set_ODR &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[18]"></a>HTS221_T_Set_ODR_Value</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = HTS221_T_Set_ODR_Value &rArr; HTS221_Set_Odr &rArr; HTS221_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1a]"></a>HTS221_T_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, hts221_driver_hl.o(i.HTS221_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = HTS221_T_Write_Reg &rArr; HTS221_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTS221_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hts221_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>LIS3MDL_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Check_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1d]"></a>LIS3MDL_DeInit</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_DeInit &rArr; LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>LIS3MDL_Get_Axes</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LIS3MDL_Get_Axes &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_Get_Magnetic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>LIS3MDL_Get_AxesRaw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LIS3MDL_Get_AxesRaw &rArr; LIS3MDL_MAG_Get_Magnetic &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_Get_Magnetic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>LIS3MDL_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Get_DRDY_Status &rArr; LIS3MDL_MAG_R_NewXYZData &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_NewXYZData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>LIS3MDL_Get_FS</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Get_FS &rArr; LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>LIS3MDL_Get_ODR</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Get_ODR &rArr; LIS3MDL_MAG_R_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_OutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>LIS3MDL_Get_Sensitivity</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Get_Sensitivity &rArr; LIS3MDL_MAG_R_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>LIS3MDL_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LIS3MDL_Get_WhoAmI &rArr; LIS3MDL_MAG_R_WHO_AM_I_ &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1c]"></a>LIS3MDL_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LIS3MDL_Init &rArr; LIS3MDL_MAG_W_TemperatureSensor &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_TemperatureSensor
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OperatingModeXY
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_BlockDataUpdate
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_R_WHO_AM_I_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>LIS3MDL_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_Read_Reg &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>LIS3MDL_Sensor_Disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Sensor_Disable &rArr; LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>LIS3MDL_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Sensor_Enable &rArr; LIS3MDL_MAG_W_SystemOperatingMode &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_SystemOperatingMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>LIS3MDL_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Set_FS &rArr; LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>LIS3MDL_Set_FS_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Set_FS_Value &rArr; LIS3MDL_MAG_W_FullScale &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>LIS3MDL_Set_ODR</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Set_ODR &rArr; LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>LIS3MDL_Set_ODR_Value</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LIS3MDL_Set_ODR_Value &rArr; LIS3MDL_MAG_W_OutputDataRate &rArr; LIS3MDL_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_W_OutputDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2c]"></a>LIS3MDL_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lis3mdl_mag_driver_hl.o(i.LIS3MDL_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LIS3MDL_Write_Reg &rArr; LIS3MDL_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL_MAG_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lis3mdl_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4f]"></a>LPS22HB_FIFO_Get_Data</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_FIFO_Get_Data &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[48]"></a>LPS22HB_FIFO_Get_Empty_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Empty_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b]"></a>LPS22HB_FIFO_Get_Fth_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Fth_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Fth_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[49]"></a>LPS22HB_FIFO_Get_Full_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Full_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[50]"></a>LPS22HB_FIFO_Get_Mode</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Mode &rArr; LPS22HB_Get_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4e]"></a>LPS22HB_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Num_Of_Samples &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4a]"></a>LPS22HB_FIFO_Get_Ovr_Status</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Ovr_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_FIFO_Get_Ovr_Status &rArr; LPS22HB_Get_FifoStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoStatus
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[52]"></a>LPS22HB_FIFO_Get_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Get_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_FIFO_Get_Watermark_Level &rArr; LPS22HB_Get_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[56]"></a>LPS22HB_FIFO_Reset_Interrupt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Reset_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Reset_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[55]"></a>LPS22HB_FIFO_Set_Interrupt</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Set_Interrupt &rArr; LPS22HB_Set_FIFO_OVR_Interrupt &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_OVR_Interrupt
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FULL_Interrupt
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FIFO_FTH_Interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[51]"></a>LPS22HB_FIFO_Set_Mode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Set_Mode &rArr; LPS22HB_Set_FifoMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoMode
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[53]"></a>LPS22HB_FIFO_Set_Watermark_Level</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Set_Watermark_Level &rArr; LPS22HB_Set_FifoWatermarkLevel &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevel
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4c]"></a>LPS22HB_FIFO_Stop_On_Fth</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Stop_On_Fth &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4d]"></a>LPS22HB_FIFO_Usage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Usage &rArr; LPS22HB_Set_FifoModeUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoModeUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[54]"></a>LPS22HB_FIFO_Watermark_Usage</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_FIFO_Watermark_Usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_FIFO_Watermark_Usage &rArr; LPS22HB_Set_FifoWatermarkLevelUse &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_FifoWatermarkLevelUse
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lps22hb_driver_hl.o(.data)
<LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[39e]"></a>LPS22HB_Get_ODR</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Get_ODR
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Get_ODR
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR
</UL>

<P><STRONG><a name="[3a0]"></a>LPS22HB_Initialize</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_Initialize &rArr; LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_PowerMode
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilterCutoff
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_LowPassFilter
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Bdu
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_AutomaticIncrementRegAddress
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Init
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Init
</UL>

<P><STRONG><a name="[33]"></a>LPS22HB_P_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_P_Check_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>LPS22HB_P_DeInit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_P_DeInit &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>LPS22HB_P_Get_DRDY_Status</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>LPS22HB_P_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>LPS22HB_P_Get_Press</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Get_Press &rArr; LPS22HB_Get_Pressure &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Pressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>LPS22HB_P_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_P_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2e]"></a>LPS22HB_P_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_P_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[38]"></a>LPS22HB_P_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_P_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[31]"></a>LPS22HB_P_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_P_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>LPS22HB_P_Sensor_Enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_P_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[36]"></a>LPS22HB_P_Set_ODR</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_P_Set_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>LPS22HB_P_Set_ODR_Value</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_P_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>LPS22HB_P_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_P_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3a7]"></a>LPS22HB_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Set_ODR_Value
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_P_Sensor_Enable
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Set_ODR_Value
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_T_Sensor_Enable
</UL>

<P><STRONG><a name="[40]"></a>LPS22HB_T_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS22HB_T_Check_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3c]"></a>LPS22HB_T_DeInit</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS22HB_T_DeInit &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[47]"></a>LPS22HB_T_Get_DRDY_Status</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Get_DRDY_Status &rArr; LPS22HB_Get_DataStatus &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[42]"></a>LPS22HB_T_Get_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Get_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[41]"></a>LPS22HB_T_Get_Temp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Get_Temp &rArr; LPS22HB_Get_Temperature &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f]"></a>LPS22HB_T_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS22HB_T_Get_WhoAmI &rArr; LPS22HB_Get_DeviceID &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b]"></a>LPS22HB_T_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_T_Init &rArr; LPS22HB_Initialize &rArr; LPS22HB_Set_PowerMode &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45]"></a>LPS22HB_T_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS22HB_T_Read_Reg &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3e]"></a>LPS22HB_T_Sensor_Disable</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS22HB_T_Sensor_Disable &rArr; LPS22HB_Set_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3d]"></a>LPS22HB_T_Sensor_Enable</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LPS22HB_T_Sensor_Enable &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[43]"></a>LPS22HB_T_Set_ODR</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS22HB_T_Set_ODR &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Get_ODR
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[44]"></a>LPS22HB_T_Set_ODR_Value</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LPS22HB_T_Set_ODR_Value &rArr; LPS22HB_Set_ODR_Value_When_Enabled &rArr; LPS22HB_Get_ODR &rArr; LPS22HB_Get_Odr &rArr; LPS22HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[46]"></a>LPS22HB_T_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps22hb_driver_hl.o(i.LPS22HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS22HB_T_Write_Reg &rArr; LPS22HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps22hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b2]"></a>LPS25HB_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_Init &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_SpiInterface
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_InterruptCircuitEnable
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Bdu
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Avg
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Init
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Init
</UL>

<P><STRONG><a name="[5c]"></a>LPS25HB_P_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_P_Check_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[58]"></a>LPS25HB_P_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_P_DeInit &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[63]"></a>LPS25HB_P_Get_DRDY_Status</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_P_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5e]"></a>LPS25HB_P_Get_ODR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_P_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5d]"></a>LPS25HB_P_Get_Press</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_Press))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_P_Get_Press &rArr; LPS25HB_Get_Pressure &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Pressure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5b]"></a>LPS25HB_P_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_P_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[57]"></a>LPS25HB_P_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS25HB_P_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[61]"></a>LPS25HB_P_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_P_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5a]"></a>LPS25HB_P_Sensor_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_P_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[59]"></a>LPS25HB_P_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_P_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[5f]"></a>LPS25HB_P_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_P_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[60]"></a>LPS25HB_P_Set_ODR_Value</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_P_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[62]"></a>LPS25HB_P_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_P_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_P_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3b3]"></a>LPS25HB_Set_ODR</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_T_Set_ODR
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_P_Set_ODR
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>

<P><STRONG><a name="[69]"></a>LPS25HB_T_Check_WhoAmI</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_T_Check_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[65]"></a>LPS25HB_T_DeInit</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LPS25HB_T_DeInit &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[70]"></a>LPS25HB_T_Get_DRDY_Status</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_T_Get_DRDY_Status &rArr; LPS25HB_Get_DataStatus &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DataStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6b]"></a>LPS25HB_T_Get_ODR</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_T_Get_ODR &rArr; LPS25HB_Get_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6a]"></a>LPS25HB_T_Get_Temp</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_Temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_T_Get_Temp &rArr; LPS25HB_Get_Temperature &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_Temperature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[68]"></a>LPS25HB_T_Get_WhoAmI</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LPS25HB_T_Get_WhoAmI &rArr; LPS25HB_Get_DeviceID &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Get_DeviceID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[64]"></a>LPS25HB_T_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LPS25HB_T_Init &rArr; LPS25HB_Init &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6e]"></a>LPS25HB_T_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LPS25HB_T_Read_Reg &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[67]"></a>LPS25HB_T_Sensor_Disable</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_T_Sensor_Disable &rArr; LPS25HB_DeActivate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_DeActivate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[66]"></a>LPS25HB_T_Sensor_Enable</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LPS25HB_T_Sensor_Enable &rArr; LPS25HB_Activate &rArr; LPS25HB_Set_PowerDownMode &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Activate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6c]"></a>LPS25HB_T_Set_ODR</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_T_Set_ODR &rArr; LPS25HB_Set_ODR &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6d]"></a>LPS25HB_T_Set_ODR_Value</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LPS25HB_T_Set_ODR_Value &rArr; LPS25HB_Set_Odr &rArr; LPS25HB_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_Set_Odr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[6f]"></a>LPS25HB_T_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lps25hb_driver_hl.o(i.LPS25HB_T_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LPS25HB_T_Write_Reg &rArr; LPS25HB_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS25HB_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lps25hb_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f7]"></a>LSM6DS0_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Init
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_DeInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Check_WhoAmI
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_DeInit
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[8a]"></a>LSM6DS0_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Check_WhoAmI &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[86]"></a>LSM6DS0_G_DeInit</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_DeInit &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8b]"></a>LSM6DS0_G_Get_Axes</STRONG> (Thumb, 198 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DS0_G_Get_Axes &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_AngularRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8c]"></a>LSM6DS0_G_Get_AxesRaw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_Get_AxesRaw &rArr; LSM6DS0_ACC_GYRO_Get_AngularRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_AngularRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[94]"></a>LSM6DS0_G_Get_Axes_Status</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Get_Axes_Status &rArr; LSM6DS0_ACC_GYRO_R_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisZ
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisY
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[98]"></a>LSM6DS0_G_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Get_DRDY_Status &rArr; LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataReadyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[91]"></a>LSM6DS0_G_Get_FS</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Get_FS &rArr; LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8e]"></a>LSM6DS0_G_Get_ODR</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Disable
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8d]"></a>LSM6DS0_G_Get_Sensitivity</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Get_Sensitivity &rArr; LSM6DS0_ACC_GYRO_R_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[89]"></a>LSM6DS0_G_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_G_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[85]"></a>LSM6DS0_G_Init</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Init &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Disabled
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>LSM6DS0_G_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_G_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[88]"></a>LSM6DS0_G_Sensor_Disable</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Sensor_Disable &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>LSM6DS0_G_Sensor_Enable</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_Sensor_Enable &rArr; LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>LSM6DS0_G_Set_Axes_Status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_G_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_GyroAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisZ
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisY
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[92]"></a>LSM6DS0_G_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Set_FS &rArr; LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[93]"></a>LSM6DS0_G_Set_FS_Value</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_G_Set_FS_Value &rArr; LSM6DS0_ACC_GYRO_W_GyroFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[8f]"></a>LSM6DS0_G_Set_ODR</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Set_ODR &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_When_Disabled
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[90]"></a>LSM6DS0_G_Set_ODR_Value</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_G_Set_ODR_Value &rArr; LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3f9]"></a>LSM6DS0_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS0_G_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_GyroDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Get_ODR
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_GyroDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR_Value
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Sensor_Enable
</UL>

<P><STRONG><a name="[3f8]"></a>LSM6DS0_G_Set_ODR_When_Disabled</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Set_ODR_When_Disabled))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Set_ODR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_G_Init
</UL>

<P><STRONG><a name="[97]"></a>LSM6DS0_G_Write_Reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_G_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[76]"></a>LSM6DS0_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Check_WhoAmI &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[72]"></a>LSM6DS0_X_DeInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_DeInit &rArr; LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_ODR
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[77]"></a>LSM6DS0_X_Get_Axes</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DS0_X_Get_Axes &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[78]"></a>LSM6DS0_X_Get_AxesRaw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS0_X_Get_AxesRaw &rArr; LSM6DS0_ACC_GYRO_Get_Acceleration &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_Get_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[80]"></a>LSM6DS0_X_Get_Axes_Status</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Get_Axes_Status &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisZ
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisY
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[84]"></a>LSM6DS0_X_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Get_DRDY_Status &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataReadyFlag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7d]"></a>LSM6DS0_X_Get_FS</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Get_FS &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7a]"></a>LSM6DS0_X_Get_ODR</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerDataRate
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Sensor_Disable
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[79]"></a>LSM6DS0_X_Get_Sensitivity</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Get_Sensitivity &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[75]"></a>LSM6DS0_X_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS0_X_Get_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_R_WHO_AM_I_
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[71]"></a>LSM6DS0_X_Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS0_X_Init &rArr; LSM6DS0_Check_WhoAmI &rArr; LSM6DS0_ACC_GYRO_R_WHO_AM_I_ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_BlockDataUpdate
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AutoIndexOnMultiAccess
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[82]"></a>LSM6DS0_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS0_X_Read_Reg &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[74]"></a>LSM6DS0_X_Sensor_Disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Sensor_Disable &rArr; LSM6DS0_X_Get_ODR &rArr; LSM6DS0_ACC_GYRO_R_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_X_Get_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[73]"></a>LSM6DS0_X_Sensor_Enable</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Sensor_Enable &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[81]"></a>LSM6DS0_X_Set_Axes_Status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Set_Axes_Status &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisZ
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisY
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerAxisX
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7e]"></a>LSM6DS0_X_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Set_FS &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7f]"></a>LSM6DS0_X_Set_FS_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Set_FS_Value &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerFullScale &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerFullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7b]"></a>LSM6DS0_X_Set_ODR</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS0_X_Set_ODR &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[7c]"></a>LSM6DS0_X_Set_ODR_Value</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS0_X_Set_ODR_Value &rArr; LSM6DS0_ACC_GYRO_W_AccelerometerDataRate &rArr; LSM6DS0_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_W_AccelerometerDataRate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[83]"></a>LSM6DS0_X_Write_Reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6ds0_acc_gyro_driver_hl.o(i.LSM6DS0_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS0_X_Write_Reg &rArr; LSM6DS0_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_ACC_GYRO_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds0_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[459]"></a>LSM6DS3_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Check_WhoAmI
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_DeInit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[cf]"></a>LSM6DS3_FIFO_G_Get_Axis</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_FIFO_G_Get_Axis &rArr; LSM6DS3_G_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>LSM6DS3_FIFO_G_Set_Decimation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_G_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_G_Set_Decimation &rArr; LSM6DS3_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c4]"></a>LSM6DS3_FIFO_Get_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_FIFO_Get_Data &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c1]"></a>LSM6DS3_FIFO_Get_Empty_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_Get_Empty_Status &rArr; LSM6DS3_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOEmpty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c0]"></a>LSM6DS3_FIFO_Get_Full_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_Get_Full_Status &rArr; LSM6DS3_ACC_GYRO_R_FIFOFull &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOFull
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c5]"></a>LSM6DS3_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Get_Num_Of_Samples &rArr; LSM6DS3_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFONumOfEntries
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c2]"></a>LSM6DS3_FIFO_Get_Overrun_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Overrun_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_Get_Overrun_Status &rArr; LSM6DS3_ACC_GYRO_R_OVERRUN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_OVERRUN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c3]"></a>LSM6DS3_FIFO_Get_Pattern</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Get_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Get_Pattern &rArr; LSM6DS3_ACC_GYRO_R_FIFOPattern &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FIFOPattern
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c9]"></a>LSM6DS3_FIFO_Set_INT1_FIFO_Full</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_INT1_FIFO_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_Set_INT1_FIFO_Full &rArr; LSM6DS3_ACC_GYRO_W_FSS5_on_INT1 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FSS5_on_INT1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c8]"></a>LSM6DS3_FIFO_Set_Mode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_Set_Mode &rArr; LSM6DS3_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bf]"></a>LSM6DS3_FIFO_Set_ODR_Value</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_Set_ODR_Value &rArr; LSM6DS3_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_FIFO
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cb]"></a>LSM6DS3_FIFO_Set_Stop_On_Fth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_Set_Stop_On_Fth &rArr; LSM6DS3_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_STOP_ON_FTH
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ca]"></a>LSM6DS3_FIFO_Set_Watermark_Level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_FIFO_Set_Watermark_Level &rArr; LSM6DS3_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_Watermark
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
<LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c7]"></a>LSM6DS3_FIFO_X_Get_Axis</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_FIFO_X_Get_Axis &rArr; LSM6DS3_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[c6]"></a>LSM6DS3_FIFO_X_Set_Decimation</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_FIFO_X_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_FIFO_X_Set_Decimation &rArr; LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DEC_FIFO_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[eb]"></a>LSM6DS3_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Check_WhoAmI &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e7]"></a>LSM6DS3_G_DeInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_DeInit &rArr; LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ec]"></a>LSM6DS3_G_Get_Axes</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DS3_G_Get_Axes &rArr; LSM6DS3_G_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Sensitivity
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ed]"></a>LSM6DS3_G_Get_AxesRaw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_G_Get_AxesRaw &rArr; LSM6DS3_ACC_GYRO_GetRawGyroData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f5]"></a>LSM6DS3_G_Get_Axes_Status</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Get_Axes_Status &rArr; LSM6DS3_ACC_GYRO_R_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_G
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_G
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f9]"></a>LSM6DS3_G_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Get_DRDY_Status &rArr; LSM6DS3_ACC_GYRO_R_GDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_GDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f2]"></a>LSM6DS3_G_Get_FS</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Get_FS &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ef]"></a>LSM6DS3_G_Get_ODR</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Disable
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ee]"></a>LSM6DS3_G_Get_Sensitivity</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_G
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_125
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_Axes
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ea]"></a>LSM6DS3_G_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_G_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e6]"></a>LSM6DS3_G_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_G_Init &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f7]"></a>LSM6DS3_G_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_G_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e9]"></a>LSM6DS3_G_Sensor_Disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Sensor_Disable &rArr; LSM6DS3_G_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Get_ODR
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e8]"></a>LSM6DS3_G_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Sensor_Enable &rArr; LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f6]"></a>LSM6DS3_G_Set_Axes_Status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_G
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_G
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f3]"></a>LSM6DS3_G_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Set_FS &rArr; LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f4]"></a>LSM6DS3_G_Set_FS_Value</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_FS_Value &rArr; LSM6DS3_ACC_GYRO_W_FS_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_G
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d0]"></a>LSM6DS3_G_Set_Interrupt_Latch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f0]"></a>LSM6DS3_G_Set_ODR</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Set_ODR &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f1]"></a>LSM6DS3_G_Set_ODR_Value</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_G_Set_ODR_Value &rArr; LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45a]"></a>LSM6DS3_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Set_ODR_Value
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_G_Sensor_Enable
</UL>

<P><STRONG><a name="[d1]"></a>LSM6DS3_G_Set_SelfTest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_G_Set_SelfTest &rArr; LSM6DS3_ACC_GYRO_W_SelfTest_G &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[f8]"></a>LSM6DS3_G_Write_Reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_G_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d7]"></a>LSM6DS3_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Check_WhoAmI &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d3]"></a>LSM6DS3_X_DeInit</STRONG> (Thumb, 316 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_DeInit &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Single_Tap_Detection
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Disable_Double_Tap_Detection
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b6]"></a>LSM6DS3_X_Disable_6D_Orientation</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Disable_6D_Orientation &rArr; LSM6DS3_ACC_GYRO_W_SIXD_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[af]"></a>LSM6DS3_X_Disable_Double_Tap_Detection</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Disable_Double_Tap_Detection &rArr; LSM6DS3_ACC_GYRO_W_TapEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>LSM6DS3_X_Disable_Free_Fall_Detection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Disable_Free_Fall_Detection &rArr; LSM6DS3_ACC_GYRO_W_FF_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>LSM6DS3_X_Disable_Pedometer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Disable_Pedometer &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ac]"></a>LSM6DS3_X_Disable_Single_Tap_Detection</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Disable_Single_Tap_Detection &rArr; LSM6DS3_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>LSM6DS3_X_Disable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Disable_Step_Counter_Reset &rArr; LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a5]"></a>LSM6DS3_X_Disable_Tilt_Detection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Disable_Tilt_Detection &rArr; LSM6DS3_ACC_GYRO_W_TiltEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a8]"></a>LSM6DS3_X_Disable_Wake_Up_Detection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Disable_Wake_Up_Detection &rArr; LSM6DS3_ACC_GYRO_W_WUEvOnInt2 &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b5]"></a>LSM6DS3_X_Enable_6D_Orientation</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Enable_6D_Orientation &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SIXD_THS
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ae]"></a>LSM6DS3_X_Enable_Double_Tap_Detection</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Enable_Double_Tap_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>LSM6DS3_X_Enable_Free_Fall_Detection</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Enable_Free_Fall_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TIMER_HR
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_Duration
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FFEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9d]"></a>LSM6DS3_X_Enable_Pedometer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Enable_Pedometer &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_STEP_on_INT1
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PEDO_EN
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ab]"></a>LSM6DS3_X_Enable_Single_Tap_Detection</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Enable_Single_Tap_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a1]"></a>LSM6DS3_X_Enable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Enable_Step_Counter_Reset &rArr; LSM6DS3_ACC_GYRO_W_PedoStepReset &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a4]"></a>LSM6DS3_X_Enable_Tilt_Detection</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Enable_Tilt_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TILT_EN
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FUNC_EN
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a7]"></a>LSM6DS3_X_Enable_Wake_Up_Detection</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Enable_Wake_Up_Detection &rArr; LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b7]"></a>LSM6DS3_X_Get_6D_Orientation_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_Status &rArr; LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_D6D_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b9]"></a>LSM6DS3_X_Get_6D_Orientation_XH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_XH &rArr; LSM6DS3_ACC_GYRO_R_DSD_XH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b8]"></a>LSM6DS3_X_Get_6D_Orientation_XL</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_XL &rArr; LSM6DS3_ACC_GYRO_R_DSD_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bb]"></a>LSM6DS3_X_Get_6D_Orientation_YH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_YH &rArr; LSM6DS3_ACC_GYRO_R_DSD_YH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ba]"></a>LSM6DS3_X_Get_6D_Orientation_YL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_YL &rArr; LSM6DS3_ACC_GYRO_R_DSD_YL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_YL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bd]"></a>LSM6DS3_X_Get_6D_Orientation_ZH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_ZH &rArr; LSM6DS3_ACC_GYRO_R_DSD_ZH &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[bc]"></a>LSM6DS3_X_Get_6D_Orientation_ZL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_6D_Orientation_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_6D_Orientation_ZL &rArr; LSM6DS3_ACC_GYRO_R_DSD_ZL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DSD_ZL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d8]"></a>LSM6DS3_X_Get_Axes</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DS3_X_Get_Axes &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Sensitivity
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawAccData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d9]"></a>LSM6DS3_X_Get_AxesRaw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DS3_X_Get_AxesRaw &rArr; LSM6DS3_ACC_GYRO_GetRawAccData &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_GetRawAccData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e1]"></a>LSM6DS3_X_Get_Axes_Status</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Get_Axes_Status &rArr; LSM6DS3_ACC_GYRO_R_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ZEN_XL
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_YEN_XL
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XEN_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e5]"></a>LSM6DS3_X_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_DRDY_Status &rArr; LSM6DS3_ACC_GYRO_R_XLDA &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_XLDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b0]"></a>LSM6DS3_X_Get_Double_Tap_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Double_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_Double_Tap_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[be]"></a>LSM6DS3_X_Get_Event_Status</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Event_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DS3_X_Get_Event_Status &rArr; LSM6DS3_X_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[de]"></a>LSM6DS3_X_Get_FS</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_FS &rArr; LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>LSM6DS3_X_Get_Free_Fall_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Free_Fall_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_Free_Fall_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FF_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[db]"></a>LSM6DS3_X_Get_ODR</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Disable
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9f]"></a>LSM6DS3_X_Get_Pedometer_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Pedometer_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_Pedometer_Status &rArr; LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_PEDO_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[da]"></a>LSM6DS3_X_Get_Sensitivity</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_Sensitivity &rArr; LSM6DS3_ACC_GYRO_R_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Axes
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_FIFO_X_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ad]"></a>LSM6DS3_X_Get_Single_Tap_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Single_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_Single_Tap_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a0]"></a>LSM6DS3_X_Get_Step_Count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Step_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Get_Step_Count &rArr; LSM6DS3_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_Get_GetStepCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a6]"></a>LSM6DS3_X_Get_Tilt_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Tilt_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_Tilt_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_TILT_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>LSM6DS3_X_Get_Wake_Up_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_Wake_Up_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Get_Wake_Up_Detection_Status &rArr; LSM6DS3_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WU_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d6]"></a>LSM6DS3_X_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DS3_X_Get_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d2]"></a>LSM6DS3_X_Init</STRONG> (Thumb, 162 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Init &rArr; LSM6DS3_Check_WhoAmI &rArr; LSM6DS3_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Check_WhoAmI
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e3]"></a>LSM6DS3_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DS3_X_Read_Reg &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_Event_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d5]"></a>LSM6DS3_X_Sensor_Disable</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Sensor_Disable &rArr; LSM6DS3_X_Get_ODR &rArr; LSM6DS3_ACC_GYRO_R_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Get_ODR
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[d4]"></a>LSM6DS3_X_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Sensor_Enable &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e2]"></a>LSM6DS3_X_Set_Axes_Status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_Axes_Status &rArr; LSM6DS3_ACC_GYRO_W_ZEN_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ZEN_XL
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_YEN_XL
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_XEN_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[df]"></a>LSM6DS3_X_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_FS &rArr; LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e0]"></a>LSM6DS3_X_Set_FS_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_FS_Value &rArr; LSM6DS3_ACC_GYRO_W_FS_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>LSM6DS3_X_Set_Free_Fall_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Free_Fall_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_Free_Fall_Threshold &rArr; LSM6DS3_ACC_GYRO_W_FF_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_FF_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cc]"></a>LSM6DS3_X_Set_Interrupt_Latch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_Interrupt_Latch &rArr; LSM6DS3_ACC_GYRO_W_LIR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_LIR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[dc]"></a>LSM6DS3_X_Set_ODR</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_ODR &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[dd]"></a>LSM6DS3_X_Set_ODR_Value</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DS3_X_Set_ODR_Value &rArr; LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Wake_Up_Detection
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Tilt_Detection
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Single_Tap_Detection
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Pedometer
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Free_Fall_Detection
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_Double_Tap_Detection
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Enable_6D_Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[45b]"></a>LSM6DS3_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_ODR_Value_When_Enabled &rArr; LSM6DS3_ACC_GYRO_W_ODR_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Set_ODR_Value
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_X_Sensor_Enable
</UL>

<P><STRONG><a name="[a3]"></a>LSM6DS3_X_Set_Pedometer_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Pedometer_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DS3_X_Set_Pedometer_Threshold &rArr; LSM6DS3_ACC_GYRO_W_PedoThreshold &rArr; LSM6DS3_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_PedoThreshold
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[cd]"></a>LSM6DS3_X_Set_SelfTest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_SelfTest &rArr; LSM6DS3_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SelfTest_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b4]"></a>LSM6DS3_X_Set_Tap_Duration_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Duration_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_Tap_Duration_Time &rArr; LSM6DS3_ACC_GYRO_W_DUR &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_DUR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>LSM6DS3_X_Set_Tap_Quiet_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Quiet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_Tap_Quiet_Time &rArr; LSM6DS3_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b2]"></a>LSM6DS3_X_Set_Tap_Shock_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Shock_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_Tap_Shock_Time &rArr; LSM6DS3_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_SHOCK_Duration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[b1]"></a>LSM6DS3_X_Set_Tap_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Tap_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_Tap_Threshold &rArr; LSM6DS3_ACC_GYRO_W_TAP_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_TAP_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[aa]"></a>LSM6DS3_X_Set_Wake_Up_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Set_Wake_Up_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DS3_X_Set_Wake_Up_Threshold &rArr; LSM6DS3_ACC_GYRO_W_WK_THS &rArr; LSM6DS3_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_W_WK_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[e4]"></a>LSM6DS3_X_Write_Reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6ds3_acc_gyro_driver_hl.o(i.LSM6DS3_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DS3_X_Write_Reg &rArr; LSM6DS3_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_ACC_GYRO_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6ds3_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[ff]"></a>LSM303AGR_X_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Check_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fb]"></a>LSM303AGR_X_DeInit</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_X_DeInit &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[100]"></a>LSM303AGR_X_Get_Axes</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = LSM303AGR_X_Get_Axes &rArr; LSM303AGR_ACC_Get_Acceleration &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[101]"></a>LSM303AGR_X_Get_AxesRaw</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_X_Get_AxesRaw &rArr; LSM303AGR_ACC_R_LOWPWR_EN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_Get_Raw_Acceleration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[109]"></a>LSM303AGR_X_Get_Axes_Status</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Get_Axes_Status &rArr; LSM303AGR_ACC_R_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ZEN
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_YEN
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10d]"></a>LSM303AGR_X_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Get_DRDY_Status &rArr; LSM303AGR_ACC_R_XDataAvail &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_XDataAvail
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[106]"></a>LSM303AGR_X_Get_FS</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Get_FS &rArr; LSM303AGR_ACC_R_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[103]"></a>LSM303AGR_X_Get_ODR</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Disable
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[102]"></a>LSM303AGR_X_Get_Sensitivity</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM303AGR_X_Get_Sensitivity &rArr; LSM303AGR_ACC_R_LOWPWR_EN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_LOWPWR_EN
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_HiRes
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fe]"></a>LSM303AGR_X_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_X_Get_WhoAmI &rArr; LSM303AGR_ACC_R_WHO_AM_I &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fa]"></a>LSM303AGR_X_Init</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM303AGR_X_Init &rArr; LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FifoMode
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_BlockDataUpdate
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10b]"></a>LSM303AGR_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_X_Read_Reg &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fd]"></a>LSM303AGR_X_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Sensor_Disable &rArr; LSM303AGR_X_Get_ODR &rArr; LSM303AGR_ACC_R_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Get_ODR
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[fc]"></a>LSM303AGR_X_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Sensor_Enable &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10a]"></a>LSM303AGR_X_Set_Axes_Status</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_Axes_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Set_Axes_Status &rArr; LSM303AGR_ACC_W_ZEN &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ZEN
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_YEN
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_XEN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[107]"></a>LSM303AGR_X_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Set_FS &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[108]"></a>LSM303AGR_X_Set_FS_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Set_FS_Value &rArr; LSM303AGR_ACC_W_FullScale &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_FullScale
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[104]"></a>LSM303AGR_X_Set_ODR</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Set_ODR &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[105]"></a>LSM303AGR_X_Set_ODR_Value</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM303AGR_X_Set_ODR_Value &rArr; LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[3d9]"></a>LSM303AGR_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_X_Set_ODR_Value_When_Enabled &rArr; LSM303AGR_ACC_W_ODR &rArr; LSM303AGR_ACC_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_W_ODR
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Set_ODR_Value
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_X_Sensor_Enable
</UL>

<P><STRONG><a name="[10c]"></a>LSM303AGR_X_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lsm303agr_acc_driver_hl.o(i.LSM303AGR_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_X_Write_Reg &rArr; LSM303AGR_ACC_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_ACC_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_acc_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[113]"></a>LSM303AGR_M_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Check_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10f]"></a>LSM303AGR_M_DeInit</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_M_DeInit &rArr; LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[114]"></a>LSM303AGR_M_Get_Axes</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Get_Axes &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Get_Raw_Magnetic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[115]"></a>LSM303AGR_M_Get_AxesRaw</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Get_AxesRaw &rArr; LSM303AGR_MAG_Get_Raw_Magnetic &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_Get_Raw_Magnetic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11f]"></a>LSM303AGR_M_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Get_DRDY_Status &rArr; LSM303AGR_MAG_R_ZYXDA &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ZYXDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11a]"></a>LSM303AGR_M_Get_FS</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_FS))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[117]"></a>LSM303AGR_M_Get_ODR</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Get_ODR &rArr; LSM303AGR_MAG_R_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[116]"></a>LSM303AGR_M_Get_Sensitivity</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_Sensitivity))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[112]"></a>LSM303AGR_M_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM303AGR_M_Get_WhoAmI &rArr; LSM303AGR_MAG_R_WHO_AM_I &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[10e]"></a>LSM303AGR_M_Init</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM303AGR_M_Init &rArr; LSM303AGR_MAG_W_ST &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ST
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_BDU
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11d]"></a>LSM303AGR_M_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_M_Read_Reg &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[111]"></a>LSM303AGR_M_Sensor_Disable</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Sensor_Disable &rArr; LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[110]"></a>LSM303AGR_M_Sensor_Enable</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Sensor_Enable &rArr; LSM303AGR_MAG_W_MD &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_MD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11b]"></a>LSM303AGR_M_Set_FS</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11c]"></a>LSM303AGR_M_Set_FS_Value</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_FS_Value))
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[118]"></a>LSM303AGR_M_Set_ODR</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Set_ODR &rArr; LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[119]"></a>LSM303AGR_M_Set_ODR_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM303AGR_M_Set_ODR_Value &rArr; LSM303AGR_MAG_W_ODR &rArr; LSM303AGR_MAG_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_W_ODR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>LSM303AGR_M_Write_Reg</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lsm303agr_mag_driver_hl.o(i.LSM303AGR_M_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM303AGR_M_Write_Reg &rArr; LSM303AGR_MAG_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM303AGR_MAG_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm303agr_mag_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b0]"></a>LSM6DSL_Check_WhoAmI</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Init
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Check_WhoAmI
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Init
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Check_WhoAmI
</UL>

<P><STRONG><a name="[156]"></a>LSM6DSL_FIFO_G_Get_Axis</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_FIFO_G_Get_Axis &rArr; LSM6DSL_G_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[155]"></a>LSM6DSL_FIFO_G_Set_Decimation</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_G_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_G_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14b]"></a>LSM6DSL_FIFO_Get_Data</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_FIFO_Get_Data &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[148]"></a>LSM6DSL_FIFO_Get_Empty_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Empty_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_Get_Empty_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOEmpty &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOEmpty
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[147]"></a>LSM6DSL_FIFO_Get_Full_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Full_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_Get_Full_Status &rArr; LSM6DSL_ACC_GYRO_R_FIFOFull &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOFull
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14c]"></a>LSM6DSL_FIFO_Get_Num_Of_Samples</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Num_Of_Samples))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Get_Num_Of_Samples &rArr; LSM6DSL_ACC_GYRO_R_FIFONumOfEntries &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFONumOfEntries
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>LSM6DSL_FIFO_Get_Overrun_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Overrun_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_Get_Overrun_Status &rArr; LSM6DSL_ACC_GYRO_R_OVERRUN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_OVERRUN
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14a]"></a>LSM6DSL_FIFO_Get_Pattern</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Get_Pattern))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Get_Pattern &rArr; LSM6DSL_ACC_GYRO_R_FIFOPattern &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FIFOPattern
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[150]"></a>LSM6DSL_FIFO_Set_INT1_FIFO_Full</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_INT1_FIFO_Full))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_Set_INT1_FIFO_Full &rArr; LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FULL_FLAG_on_INT1
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14f]"></a>LSM6DSL_FIFO_Set_Mode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_Set_Mode &rArr; LSM6DSL_ACC_GYRO_W_FIFO_MODE &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[146]"></a>LSM6DSL_FIFO_Set_ODR_Value</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_Set_ODR_Value &rArr; LSM6DSL_ACC_GYRO_W_ODR_FIFO &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_FIFO
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[152]"></a>LSM6DSL_FIFO_Set_Stop_On_Fth</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Stop_On_Fth))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_Set_Stop_On_Fth &rArr; LSM6DSL_ACC_GYRO_W_STOP_ON_FTH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STOP_ON_FTH
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[151]"></a>LSM6DSL_FIFO_Set_Watermark_Level</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_Set_Watermark_Level))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_FIFO_Set_Watermark_Level &rArr; LSM6DSL_ACC_GYRO_W_FIFO_Watermark &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_Watermark
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
<LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14e]"></a>LSM6DSL_FIFO_X_Get_Axis</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Get_Axis))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_FIFO_X_Get_Axis &rArr; LSM6DSL_ACC_GYRO_Get_GetFIFOData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetFIFOData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[14d]"></a>LSM6DSL_FIFO_X_Set_Decimation</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_FIFO_X_Set_Decimation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_FIFO_X_Set_Decimation &rArr; LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DEC_FIFO_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[170]"></a>LSM6DSL_G_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16c]"></a>LSM6DSL_G_DeInit</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_G_DeInit &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[171]"></a>LSM6DSL_G_Get_Axes</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DSL_G_Get_Axes &rArr; LSM6DSL_G_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Sensitivity
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[172]"></a>LSM6DSL_G_Get_AxesRaw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_G_Get_AxesRaw &rArr; LSM6DSL_ACC_GYRO_GetRawGyroData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawGyroData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17c]"></a>LSM6DSL_G_Get_DRDY_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_GDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_GDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[177]"></a>LSM6DSL_G_Get_FS</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[174]"></a>LSM6DSL_G_Get_ODR</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Disable
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[173]"></a>LSM6DSL_G_Get_Sensitivity</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_G
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_125
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_Axes
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_G_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16f]"></a>LSM6DSL_G_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_G_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16b]"></a>LSM6DSL_G_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_G_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17a]"></a>LSM6DSL_G_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_G_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16e]"></a>LSM6DSL_G_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Sensor_Disable &rArr; LSM6DSL_G_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Get_ODR
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16d]"></a>LSM6DSL_G_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Sensor_Enable &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[178]"></a>LSM6DSL_G_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[179]"></a>LSM6DSL_G_Set_FS_Value</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_G
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_125
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[157]"></a>LSM6DSL_G_Set_Interrupt_Latch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[175]"></a>LSM6DSL_G_Set_ODR</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Set_ODR &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[176]"></a>LSM6DSL_G_Set_ODR_Value</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_G_Set_ODR_Value &rArr; LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b1]"></a>LSM6DSL_G_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_G
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Set_ODR_Value
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_G_Sensor_Enable
</UL>

<P><STRONG><a name="[158]"></a>LSM6DSL_G_Set_SelfTest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_G_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_G &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_G
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[17b]"></a>LSM6DSL_G_Write_Reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_G_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_G_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15e]"></a>LSM6DSL_X_Check_WhoAmI</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Check_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Check_WhoAmI &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15a]"></a>LSM6DSL_X_DeInit</STRONG> (Thumb, 368 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_DeInit &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Single_Tap_Detection
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Disable_Double_Tap_Detection
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13d]"></a>LSM6DSL_X_Disable_6D_Orientation</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Disable_6D_Orientation &rArr; LSM6DSL_ACC_GYRO_W_SIXD_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[136]"></a>LSM6DSL_X_Disable_Double_Tap_Detection</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Disable_Double_Tap_Detection &rArr; LSM6DSL_ACC_GYRO_W_TapEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[121]"></a>LSM6DSL_X_Disable_Free_Fall_Detection</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Disable_Free_Fall_Detection &rArr; LSM6DSL_ACC_GYRO_W_FF_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[125]"></a>LSM6DSL_X_Disable_Pedometer</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Disable_Pedometer &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[133]"></a>LSM6DSL_X_Disable_Single_Tap_Detection</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Disable_Single_Tap_Detection &rArr; LSM6DSL_ACC_GYRO_W_TAP_Z_EN &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[129]"></a>LSM6DSL_X_Disable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Disable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12c]"></a>LSM6DSL_X_Disable_Tilt_Detection</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Disable_Tilt_Detection &rArr; LSM6DSL_ACC_GYRO_W_TiltEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12f]"></a>LSM6DSL_X_Disable_Wake_Up_Detection</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Disable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Disable_Wake_Up_Detection &rArr; LSM6DSL_ACC_GYRO_W_WUEvOnInt2 &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13c]"></a>LSM6DSL_X_Enable_6D_Orientation</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_6D_Orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Enable_6D_Orientation &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SIXD_THS
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt2
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_6DEvOnInt1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[135]"></a>LSM6DSL_X_Enable_Double_Tap_Detection</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Double_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Enable_Double_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt2
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TapEvOnInt1
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SINGLE_DOUBLE_TAP_EV
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[120]"></a>LSM6DSL_X_Enable_Free_Fall_Detection</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Free_Fall_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Enable_Free_Fall_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TIMER_HR
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SLEEP_DUR
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_Duration
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt2
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FFEvOnInt1
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[124]"></a>LSM6DSL_X_Enable_Pedometer</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Pedometer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Enable_Pedometer &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_STEP_DET_on_INT1
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PEDO
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[132]"></a>LSM6DSL_X_Enable_Single_Tap_Detection</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Single_Tap_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Enable_Single_Tap_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Z_EN
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_Y_EN
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_X_EN
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt2
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SingleTapOnInt1
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[128]"></a>LSM6DSL_X_Enable_Step_Counter_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Step_Counter_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Enable_Step_Counter_Reset &rArr; LSM6DSL_ACC_GYRO_W_PedoStepReset &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoStepReset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12b]"></a>LSM6DSL_X_Enable_Tilt_Detection</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Tilt_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Enable_Tilt_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt2
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TiltEvOnInt1
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TILT
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FUNC_EN
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12e]"></a>LSM6DSL_X_Enable_Wake_Up_Detection</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Enable_Wake_Up_Detection))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Enable_Wake_Up_Detection &rArr; LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt2
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WUEvOnInt1
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WAKE_DUR
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BASIC_INT
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13e]"></a>LSM6DSL_X_Get_6D_Orientation_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_Status &rArr; LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_D6D_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[140]"></a>LSM6DSL_X_Get_6D_Orientation_XH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XH &rArr; LSM6DSL_ACC_GYRO_R_DSD_XH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13f]"></a>LSM6DSL_X_Get_6D_Orientation_XL</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_XL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_XL &rArr; LSM6DSL_ACC_GYRO_R_DSD_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[142]"></a>LSM6DSL_X_Get_6D_Orientation_YH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YH &rArr; LSM6DSL_ACC_GYRO_R_DSD_YH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[141]"></a>LSM6DSL_X_Get_6D_Orientation_YL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_YL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_YL &rArr; LSM6DSL_ACC_GYRO_R_DSD_YL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_YL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[144]"></a>LSM6DSL_X_Get_6D_Orientation_ZH</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZH))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZH &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZH &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[143]"></a>LSM6DSL_X_Get_6D_Orientation_ZL</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_6D_Orientation_ZL))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_6D_Orientation_ZL &rArr; LSM6DSL_ACC_GYRO_R_DSD_ZL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DSD_ZL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15f]"></a>LSM6DSL_X_Get_Axes</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = LSM6DSL_X_Get_Axes &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Sensitivity
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[160]"></a>LSM6DSL_X_Get_AxesRaw</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_AxesRaw))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = LSM6DSL_X_Get_AxesRaw &rArr; LSM6DSL_ACC_GYRO_GetRawAccData &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_GetRawAccData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[16a]"></a>LSM6DSL_X_Get_DRDY_Status</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_DRDY_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_DRDY_Status &rArr; LSM6DSL_ACC_GYRO_R_XLDA &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_XLDA
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[137]"></a>LSM6DSL_X_Get_Double_Tap_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Double_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_Double_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_DOUBLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[145]"></a>LSM6DSL_X_Get_Event_Status</STRONG> (Thumb, 356 bytes, Stack size 40 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Event_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = LSM6DSL_X_Get_Event_Status &rArr; LSM6DSL_X_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Read_Reg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[165]"></a>LSM6DSL_X_Get_FS</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_FS &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[122]"></a>LSM6DSL_X_Get_Free_Fall_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Free_Fall_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_Free_Fall_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_FF_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FF_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[162]"></a>LSM6DSL_X_Get_ODR</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Disable
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_DeInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[126]"></a>LSM6DSL_X_Get_Pedometer_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Pedometer_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_Pedometer_Status &rArr; LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_PEDO_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[161]"></a>LSM6DSL_X_Get_Sensitivity</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Sensitivity))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_Sensitivity &rArr; LSM6DSL_ACC_GYRO_R_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_FS_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Axes
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_FIFO_X_Get_Axis
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[134]"></a>LSM6DSL_X_Get_Single_Tap_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Single_Tap_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_Single_Tap_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_SINGLE_TAP_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[127]"></a>LSM6DSL_X_Get_Step_Count</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Step_Count))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Get_Step_Count &rArr; LSM6DSL_ACC_GYRO_Get_GetStepCounter &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_Get_GetStepCounter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[12d]"></a>LSM6DSL_X_Get_Tilt_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Tilt_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_Tilt_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_TILT_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[130]"></a>LSM6DSL_X_Get_Wake_Up_Detection_Status</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_Wake_Up_Detection_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Get_Wake_Up_Detection_Status &rArr; LSM6DSL_ACC_GYRO_R_WU_EV_STATUS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WU_EV_STATUS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15d]"></a>LSM6DSL_X_Get_WhoAmI</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Get_WhoAmI))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = LSM6DSL_X_Get_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_R_WHO_AM_I
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[159]"></a>LSM6DSL_X_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Init &rArr; LSM6DSL_Check_WhoAmI &rArr; LSM6DSL_ACC_GYRO_R_WHO_AM_I &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Check_WhoAmI
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_IF_Addr_Incr
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FIFO_MODE
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_BDU
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[168]"></a>LSM6DSL_X_Read_Reg</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Read_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = LSM6DSL_X_Read_Reg &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_ReadReg
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_Event_Status
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15c]"></a>LSM6DSL_X_Sensor_Disable</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Sensor_Disable &rArr; LSM6DSL_X_Get_ODR &rArr; LSM6DSL_ACC_GYRO_R_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Get_ODR
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[15b]"></a>LSM6DSL_X_Sensor_Enable</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Sensor_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Sensor_Enable &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[166]"></a>LSM6DSL_X_Set_FS</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_FS &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[167]"></a>LSM6DSL_X_Set_FS_Value</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_FS_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_FS_Value &rArr; LSM6DSL_ACC_GYRO_W_FS_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FS_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[123]"></a>LSM6DSL_X_Set_Free_Fall_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Free_Fall_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_Free_Fall_Threshold &rArr; LSM6DSL_ACC_GYRO_W_FF_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_FF_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[153]"></a>LSM6DSL_X_Set_Interrupt_Latch</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Interrupt_Latch))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_Interrupt_Latch &rArr; LSM6DSL_ACC_GYRO_W_LIR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_LIR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[163]"></a>LSM6DSL_X_Set_ODR</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_ODR &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[164]"></a>LSM6DSL_X_Set_ODR_Value</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = LSM6DSL_X_Set_ODR_Value &rArr; LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value_When_Enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Wake_Up_Detection
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Tilt_Detection
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Single_Tap_Detection
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Pedometer
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Free_Fall_Detection
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_Double_Tap_Detection
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Enable_6D_Orientation
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[4b2]"></a>LSM6DSL_X_Set_ODR_Value_When_Enabled</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_ODR_Value_When_Enabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_ODR_Value_When_Enabled &rArr; LSM6DSL_ACC_GYRO_W_ODR_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_ODR_XL
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Set_ODR_Value
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_X_Sensor_Enable
</UL>

<P><STRONG><a name="[12a]"></a>LSM6DSL_X_Set_Pedometer_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Pedometer_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = LSM6DSL_X_Set_Pedometer_Threshold &rArr; LSM6DSL_ACC_GYRO_W_PedoThreshold &rArr; LSM6DSL_ACC_GYRO_W_EmbeddedAccess &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_PedoThreshold
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[154]"></a>LSM6DSL_X_Set_SelfTest</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_SelfTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_SelfTest &rArr; LSM6DSL_ACC_GYRO_W_SelfTest_XL &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SelfTest_XL
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13b]"></a>LSM6DSL_X_Set_Tap_Duration_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Duration_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_Tap_Duration_Time &rArr; LSM6DSL_ACC_GYRO_W_DUR &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_DUR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[13a]"></a>LSM6DSL_X_Set_Tap_Quiet_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Quiet_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_Tap_Quiet_Time &rArr; LSM6DSL_ACC_GYRO_W_QUIET_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_QUIET_Duration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[139]"></a>LSM6DSL_X_Set_Tap_Shock_Time</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Shock_Time))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_Tap_Shock_Time &rArr; LSM6DSL_ACC_GYRO_W_SHOCK_Duration &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_SHOCK_Duration
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[138]"></a>LSM6DSL_X_Set_Tap_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Tap_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_Tap_Threshold &rArr; LSM6DSL_ACC_GYRO_W_TAP_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_TAP_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[131]"></a>LSM6DSL_X_Set_Wake_Up_Threshold</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Set_Wake_Up_Threshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = LSM6DSL_X_Set_Wake_Up_Threshold &rArr; LSM6DSL_ACC_GYRO_W_WK_THS &rArr; LSM6DSL_ACC_GYRO_ReadReg &rArr; Sensor_IO_Read &rArr; HAL_I2C_Mem_Read &rArr; I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_W_WK_THS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[169]"></a>LSM6DSL_X_Write_Reg</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lsm6dsl_acc_gyro_driver_hl.o(i.LSM6DSL_X_Write_Reg))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = LSM6DSL_X_Write_Reg &rArr; LSM6DSL_ACC_GYRO_WriteReg &rArr; Sensor_IO_Write &rArr; HAL_I2C_Mem_Write &rArr; I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_ACC_GYRO_WriteReg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lsm6dsl_acc_gyro_driver_hl.o(.data)
</UL>
<P><STRONG><a name="[2de]"></a>BSP_LIS3MDL_MAGNETO_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_LIS3MDL_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LIS3MDL_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init_IKS01A1
</UL>

<P><STRONG><a name="[2e7]"></a>BSP_LSM303AGR_MAGNETO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a1_magneto.o(i.BSP_LSM303AGR_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init_IKS01A1
</UL>

<P><STRONG><a name="[2df]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[2e5]"></a>BSP_LPS25HB_PRESSURE_Init</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, x_nucleo_iks01a1_pressure.o(i.BSP_LPS25HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LPS25HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[2cc]"></a>BSP_LSM6DS0_ACCELERO_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_LSM6DS0_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS0_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS0_Sensor_IO_ITConfig
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A1
</UL>

<P><STRONG><a name="[2cb]"></a>BSP_LSM6DS3_ACCELERO_Init</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, x_nucleo_iks01a1_accelero.o(i.BSP_LSM6DS3_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS3_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A1
</UL>

<P><STRONG><a name="[2d1]"></a>BSP_LSM6DS0_GYRO_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_LSM6DS0_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS0_GYRO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init_IKS01A1
</UL>

<P><STRONG><a name="[2d0]"></a>BSP_LSM6DS3_GYRO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a1_gyro.o(i.BSP_LSM6DS3_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM6DS3_GYRO_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DS3_Sensor_IO_ITConfig
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init_IKS01A1
</UL>

<P><STRONG><a name="[2d3]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, x_nucleo_iks01a1_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init_IKS01A1
</UL>

<P><STRONG><a name="[2d7]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[2e3]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A1
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[2e6]"></a>BSP_LPS25HB_TEMPERATURE_Init</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, x_nucleo_iks01a1_temperature.o(i.BSP_LPS25HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LPS25HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A1 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A1
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A1
</UL>

<P><STRONG><a name="[2cf]"></a>BSP_LSM303AGR_ACCELERO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_LSM303AGR_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM303AGR_ACCELERO_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A2
</UL>

<P><STRONG><a name="[2ce]"></a>BSP_LSM6DSL_ACCELERO_Init</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, x_nucleo_iks01a2_accelero.o(i.BSP_LSM6DSL_ACCELERO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LSM6DSL_ACCELERO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ACCELERO_Init_IKS01A2
</UL>

<P><STRONG><a name="[2d2]"></a>BSP_LSM6DSL_GYRO_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, x_nucleo_iks01a2_gyro.o(i.BSP_LSM6DSL_GYRO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = BSP_LSM6DSL_GYRO_Init &rArr; LSM6DSL_Sensor_IO_ITConfig &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSL_Sensor_IO_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GYRO_Init_IKS01A2
</UL>

<P><STRONG><a name="[2d5]"></a>BSP_HTS221_HUMIDITY_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, x_nucleo_iks01a2_humidity.o(i.BSP_HTS221_HUMIDITY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_HUMIDITY_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_HUMIDITY_Init_IKS01A2
</UL>

<P><STRONG><a name="[2e8]"></a>BSP_LSM303AGR_MAGNETO_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, x_nucleo_iks01a2_magneto.o(i.BSP_LSM303AGR_MAGNETO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LSM303AGR_MAGNETO_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MAGNETO_Init_IKS01A2
</UL>

<P><STRONG><a name="[2e1]"></a>BSP_LPS22HB_PRESSURE_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, x_nucleo_iks01a2_pressure.o(i.BSP_LPS22HB_PRESSURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_PRESSURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_PRESSURE_Init_IKS01A2
</UL>

<P><STRONG><a name="[2d8]"></a>BSP_HTS221_TEMPERATURE_Init</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_HTS221_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_HTS221_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A2
</UL>

<P><STRONG><a name="[2e4]"></a>BSP_LPS22HB_TEMPERATURE_Init</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, x_nucleo_iks01a2_temperature.o(i.BSP_LPS22HB_TEMPERATURE_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = BSP_LPS22HB_TEMPERATURE_Init &rArr; Sensor_IO_Init_IKS01A2 &rArr; I2C_Global_Init &rArr; HAL_I2C_Init &rArr; HAL_I2C_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sensor_IO_Init_IKS01A2
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPS22HB_Sensor_IO_ITConfig_IKS01A2
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_TEMPERATURE_Init_IKS01A2
</UL>

<P><STRONG><a name="[31b]"></a>FLASH_SetErrorCode</STRONG> (Thumb, 130 bytes, Stack size 0 bytes, stm32f4xx_hal_flash.o(i.FLASH_SetErrorCode))
<BR><BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForLastOperation
</UL>

<P><STRONG><a name="[355]"></a>UART_SetConfig</STRONG> (Thumb, 820 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[357]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[32f]"></a>I2C_RequestMemoryRead</STRONG> (Thumb, 268 bytes, Stack size 40 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = I2C_RequestMemoryRead &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[332]"></a>I2C_RequestMemoryWrite</STRONG> (Thumb, 174 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_RequestMemoryWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = I2C_RequestMemoryWrite &rArr; I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnTXEFlagUntilTimeout
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnMasterAddressFlagUntilTimeout
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[334]"></a>I2C_WaitOnBTFFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnBTFFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnBTFFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
</UL>

<P><STRONG><a name="[32e]"></a>I2C_WaitOnFlagUntilTimeout</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[378]"></a>I2C_WaitOnMasterAddressFlagUntilTimeout</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnMasterAddressFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = I2C_WaitOnMasterAddressFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[330]"></a>I2C_WaitOnRXNEFlagUntilTimeout</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnRXNEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnRXNEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Read
</UL>

<P><STRONG><a name="[333]"></a>I2C_WaitOnTXEFlagUntilTimeout</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, stm32f4xx_hal_i2c.o(i.I2C_WaitOnTXEFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = I2C_WaitOnTXEFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_I2C_Mem_Write
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryWrite
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_RequestMemoryRead
</UL>

<P><STRONG><a name="[340]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, stm32f4xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[33f]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, stm32f4xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[34d]"></a>TIM_OC1_SetConfig</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, stm32f4xx_hal_tim.o(i.TIM_OC1_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_OC1_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_ConfigChannel
</UL>

<P><STRONG><a name="[239]"></a>DecisionTreeActivity</STRONG> (Thumb, 2820 bytes, Stack size 32 bytes, motion_ar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DecisionTreeActivity
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>

<P><STRONG><a name="[232]"></a>ActivityRecognizerFunction</STRONG> (Thumb, 2734 bytes, Stack size 280 bytes, motion_ar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = ActivityRecognizerFunction &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TemporalMetaClassifier
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecisionTreeActivity
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionAR_Update
</UL>

<P><STRONG><a name="[23a]"></a>TemporalMetaClassifier</STRONG> (Thumb, 710 bytes, Stack size 16 bytes, motion_ar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TemporalMetaClassifier
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ActivityRecognizerFunction
</UL>

<P><STRONG><a name="[241]"></a>CarryPositionRecognizerFunction</STRONG> (Thumb, 2518 bytes, Stack size 216 bytes, motion_cp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = CarryPositionRecognizerFunction &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSumOfBits
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DecisionTree3
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionCP_Update
</UL>

<P><STRONG><a name="[248]"></a>DecisionTree3</STRONG> (Thumb, 1238 bytes, Stack size 0 bytes, motion_cp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
</UL>

<P><STRONG><a name="[249]"></a>GetSumOfBits</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, motion_cp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CarryPositionRecognizerFunction
</UL>

<P><STRONG><a name="[26d]"></a>AsyncHeadway_initialize</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = AsyncHeadway_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_9X
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_enable_6X
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
</UL>

<P><STRONG><a name="[24e]"></a>m_dcm2q_eml</STRONG> (Thumb, 486 bytes, Stack size 40 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = m_dcm2q_eml &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[24f]"></a>findDirection</STRONG> (Thumb, 648 bytes, Stack size 40 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = findDirection &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>

<P><STRONG><a name="[250]"></a>iNemo_quat2heading</STRONG> (Thumb, 398 bytes, Stack size 72 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = iNemo_quat2heading &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;findDirection
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Update
</UL>

<P><STRONG><a name="[252]"></a>iNemoEngine_9p6_setOrientation</STRONG> (Thumb, 1460 bytes, Stack size 40 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_9
</UL>
<BR>[Called By]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_setKnobs
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_initialize
</UL>

<P><STRONG><a name="[25d]"></a>m_q2dcm_eml</STRONG> (Thumb, 214 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[25e]"></a>m_qmult_eml</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[253]"></a>m_norm_eml</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = m_norm_eml &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[257]"></a>m_mldivide</STRONG> (Thumb, 544 bytes, Stack size 60 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = m_mldivide
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[254]"></a>m_interp1q_constrain</STRONG> (Thumb, 210 bytes, Stack size 32 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = m_interp1q_constrain &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
</UL>

<P><STRONG><a name="[255]"></a>m_kalman_3gyro</STRONG> (Thumb, 14816 bytes, Stack size 1856 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 1984<LI>Call Chain = m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memset4_12
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_interp1q_constrain
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_mldivide
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_norm_eml
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_dcm2q_eml
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fmax
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
</UL>
<BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
</UL>

<P><STRONG><a name="[25f]"></a>SpacePointAlgorithm</STRONG> (Thumb, 964 bytes, Stack size 352 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2336<LI>Call Chain = SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_kalman_3gyro
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
</UL>

<P><STRONG><a name="[260]"></a>output_update</STRONG> (Thumb, 836 bytes, Stack size 112 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_asin
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_rt_atan2f_snf
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_q2dcm_eml
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
</UL>

<P><STRONG><a name="[263]"></a>getMagStats</STRONG> (Thumb, 550 bytes, Stack size 56 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = getMagStats &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeEllipsoidHICoeff
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runCalibration
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal
</UL>

<P><STRONG><a name="[264]"></a>MEMS_updateMagBufferIndex</STRONG> (Thumb, 468 bytes, Stack size 48 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MEMS_updateMagBufferIndex &rArr; __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_solveEllipsoid
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBuffer
</UL>

<P><STRONG><a name="[266]"></a>MEMS_runMagCal</STRONG> (Thumb, 3530 bytes, Stack size 1224 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2040<LI>Call Chain = MEMS_runMagCal &rArr; MEMS_runCalibration &rArr; MEMS_solveEllipsoid &rArr; computeEllipsoidHICoeff &rArr; getMagStats &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBuffer
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runCalibration
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagStats
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_MagCal_run
</UL>

<P><STRONG><a name="[26a]"></a>iNemoEngine_API_initialize</STRONG> (Thumb, 1102 bytes, Stack size 24 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = iNemoEngine_API_initialize &rArr; iNemoEngine_9p6_setOrientation
</UL>
<BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_setOrientation
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AsyncHeadway_initialize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memclr4_9
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_initialize
</UL>

<P><STRONG><a name="[270]"></a>iNemoEngine_API_Update</STRONG> (Thumb, 956 bytes, Stack size 64 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 3000<LI>Call Chain = iNemoEngine_API_Update &rArr; iNemoEngine_9p6_Update &rArr; SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_quat2heading
</UL>
<BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_update
</UL>

<P><STRONG><a name="[261]"></a>m_rt_atan2f_snf</STRONG> (Thumb, 324 bytes, Stack size 24 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
</UL>

<P><STRONG><a name="[273]"></a>iNemo_propagate_6X</STRONG> (Thumb, 1334 bytes, Stack size 168 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = iNemo_propagate_6X &rArr; output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect_6X
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
</UL>

<P><STRONG><a name="[272]"></a>iNemo_propagate</STRONG> (Thumb, 1290 bytes, Stack size 160 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = iNemo_propagate &rArr; output_update &rArr; m_rt_atan2f_snf &rArr; __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointGyroProp
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_update
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionFX_propagate
</UL>

<P><STRONG><a name="[268]"></a>MEMS_runCalibration</STRONG> (Thumb, 1868 bytes, Stack size 224 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = MEMS_runCalibration &rArr; MEMS_solveEllipsoid &rArr; computeEllipsoidHICoeff &rArr; getMagStats &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_solveEllipsoid
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagStats
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal
</UL>

<P><STRONG><a name="[267]"></a>MEMS_updateMagBuffer</STRONG> (Thumb, 1692 bytes, Stack size 96 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MEMS_updateMagBuffer &rArr; MEMS_updateMagBufferIndex &rArr; __hardfp_roundf &rArr; _frnd
</UL>
<BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBufferIndex
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runMagCal
</UL>

<P><STRONG><a name="[27d]"></a>rotVect</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
</UL>

<P><STRONG><a name="[27b]"></a>rotVect_6X</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, motion_fx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_9p6_Update
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
</UL>

<P><STRONG><a name="[279]"></a>iNemoEngine_9p6_Update</STRONG> (Thumb, 1764 bytes, Stack size 600 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 2936<LI>Call Chain = iNemoEngine_9p6_Update &rArr; SpacePointAlgorithm &rArr; m_kalman_3gyro &rArr; __hardfp_floor &rArr; __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect_6X
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotVect
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpacePointAlgorithm
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemoEngine_API_Update
</UL>

<P><STRONG><a name="[27c]"></a>SpacePointGyroProp</STRONG> (Thumb, 296 bytes, Stack size 16 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SpacePointGyroProp &rArr; __hardfp_sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;m_qmult_eml
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;iNemo_propagate_6X
</UL>

<P><STRONG><a name="[27e]"></a>MEMS_solveEllipsoid</STRONG> (Thumb, 1740 bytes, Stack size 176 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = MEMS_solveEllipsoid &rArr; computeEllipsoidHICoeff &rArr; getMagStats &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_acosf
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeEllipsoidHICoeff
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_updateMagBufferIndex
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cosf
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_runCalibration
</UL>

<P><STRONG><a name="[283]"></a>computeEllipsoidHICoeff</STRONG> (Thumb, 1852 bytes, Stack size 344 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = computeEllipsoidHICoeff &rArr; getMagStats &rArr; __hardfp_sqrtf
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;llEvaluate
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getMagStats
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_roundf
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrtf
</UL>
<BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MEMS_solveEllipsoid
</UL>

<P><STRONG><a name="[284]"></a>llEvaluate</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, motion_fx.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = llEvaluate
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeEllipsoidHICoeff
</UL>

<P><STRONG><a name="[285]"></a>DetectPickUpGesture</STRONG> (Thumb, 4418 bytes, Stack size 272 bytes, motion_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = DetectPickUpGesture &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
</UL>

<P><STRONG><a name="[288]"></a>GetNewBufferIndex2</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, motion_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GetNewBufferIndex2
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
</UL>

<P><STRONG><a name="[289]"></a>DetectGlanceGesture</STRONG> (Thumb, 2386 bytes, Stack size 144 bytes, motion_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = DetectGlanceGesture &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetNewBufferIndex2
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atanf
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectAndroidLGestures
</UL>

<P><STRONG><a name="[28c]"></a>DetectAndroidLGestures</STRONG> (Thumb, 1134 bytes, Stack size 240 bytes, motion_gr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = DetectAndroidLGestures &rArr; DetectPickUpGesture &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectGlanceGesture
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DetectPickUpGesture
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionGR_Update
</UL>

<P><STRONG><a name="[290]"></a>FilterData</STRONG> (Thumb, 216 bytes, Stack size 48 bytes, motion_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = FilterData &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;runStepDetection
</UL>

<P><STRONG><a name="[291]"></a>runStepDetection</STRONG> (Thumb, 4656 bytes, Stack size 4976 bytes, motion_pm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 5112<LI>Call Chain = runStepDetection &rArr; FilterData &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FilterData
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_floor
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotionPM_Update
</UL>

<P><STRONG><a name="[4de]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[4f3]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4f2]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[219]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
